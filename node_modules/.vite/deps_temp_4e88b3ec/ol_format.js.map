{
  "version": 3,
  "sources": ["../../ol/format/EsriJSON.js", "../../ol/xml.js", "../../ol/format/XMLFeature.js", "../../ol/format/GMLBase.js", "../../ol/format/xsd.js", "../../ol/format/GML2.js", "../../ol/format/GML3.js", "../../ol/format/GML.js", "../../ol/format/GPX.js", "../../ol/format/TextFeature.js", "../../ol/format/IGC.js", "../../ol/format/KML.js", "../../ol/format/XML.js", "../../ol/format/xlink.js", "../../ol/format/OWS.js", "../../ol/geom/flat/flip.js", "../../ol/format/Polyline.js", "../../ol/format/TopoJSON.js", "../../ol/format/GML32.js", "../../ol/format/filter/Filter.js", "../../ol/format/filter/LogicalNary.js", "../../ol/format/filter/And.js", "../../ol/format/filter/Bbox.js", "../../ol/format/filter.js", "../../ol/format/WFS.js", "../../ol/format/WKB.js", "../../ol/format/WKT.js", "../../ol/format/WMSCapabilities.js", "../../ol/format/WMSGetFeatureInfo.js", "../../ol/format/WMTSCapabilities.js"],
  "sourcesContent": ["/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent} from '../extent.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  Point: readPointGeometry,\n  LineString: readLineStringGeometry,\n  Polygon: readPolygonGeometry,\n  MultiPoint: readMultiPointGeometry,\n  MultiLineString: readMultiLineStringGeometry,\n  MultiPolygon: readMultiPolygonGeometry,\n};\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nconst GEOMETRY_WRITERS = {\n  Point: writePointGeometry,\n  LineString: writeLineStringGeometry,\n  Polygon: writePolygonGeometry,\n  MultiPoint: writeMultiPointGeometry,\n  MultiLineString: writeMultiLineStringGeometry,\n  MultiPolygon: writeMultiPolygonGeometry,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nclass EsriJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @param {string} [idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options, idField) {\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n    feature.setGeometry(geometry);\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      const id = esriJSONFeature.attributes[idField];\n      if (id !== undefined) {\n        feature.setId(/** @type {number} */ (id));\n      }\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    options = options ? options : {};\n    if (object['features']) {\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\n      /** @type {Array<import(\"../Feature.js\").default>} */\n      const features = [];\n      const esriJSONFeatures = esriJSONFeatureSet.features;\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(\n          this.readFeatureFromObject(\n            esriJSONFeatures[i],\n            options,\n            object.objectIdFieldName\n          )\n        );\n      }\n      return features;\n    }\n    return [this.readFeatureFromObject(object, options)];\n  }\n\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    if (\n      object['spatialReference'] &&\n      object['spatialReference']['wkid'] !== undefined\n    ) {\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (\n        object['spatialReference']\n      );\n      const crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    }\n    return null;\n  }\n\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n    const object = {};\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, options);\n      const projection =\n        options && (options.dataProjection || options.featureProjection);\n      if (projection) {\n        object['geometry']['spatialReference'] =\n          /** @type {EsriJSONSpatialReferenceWkid} */ ({\n            wkid: Number(getProjection(projection).getCode().split(':').pop()),\n          });\n      }\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      'features': objects,\n    };\n  }\n}\n\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let type;\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = 'Point';\n  } else if (object['points']) {\n    type = 'MultiPoint';\n  } else if (object['paths']) {\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\n    if (esriJSONPolyline.paths.length === 1) {\n      type = 'LineString';\n    } else {\n      type = 'MultiLineString';\n    }\n  } else if (object['rings']) {\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\n    const layout = getGeometryLayout(esriJSONPolygon);\n    const rings = convertRings(esriJSONPolygon.rings, layout);\n    if (rings.length === 1) {\n      type = 'Polygon';\n      object = Object.assign({}, object, {['rings']: rings[0]});\n    } else {\n      type = 'MultiPolygon';\n      object = Object.assign({}, object, {['rings']: rings});\n    }\n  }\n  const geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, options);\n}\n\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n  const flatRing = [];\n  const outerRings = [];\n  const holes = [];\n  let i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\n    // is this ring an outer ring? is it clockwise?\n    const clockwise = linearRingIsClockwise(\n      flatRing,\n      0,\n      flatRing.length,\n      layout.length\n    );\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n  while (holes.length) {\n    const hole = holes.shift();\n    let matched = false;\n    // loop over all outer rings and see if they contain our hole.\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      const outerRing = outerRings[i][0];\n      const containsHole = containsExtent(\n        new LinearRing(outerRing).getExtent(),\n        new LinearRing(hole).getExtent()\n      );\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n  return outerRings;\n}\n\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n  let point;\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], 'XYZ');\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], 'XYM');\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n  return point;\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  if (object.hasZ === true && object.hasM === true) {\n    layout = 'XYZM';\n  } else if (object.hasZ === true) {\n    layout = 'XYZ';\n  } else if (object.hasM === true) {\n    layout = 'XYM';\n  }\n  return layout;\n}\n\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  const coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n  let esriJSON;\n  const layout = geometry.getLayout();\n  if (layout === 'XYZ') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n    };\n  } else if (layout === 'XYM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2],\n    };\n  } else if (layout === 'XYZM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3],\n    };\n  } else if (layout === 'XY') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n    };\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n  return esriJSON;\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n  const layout = geometry.getLayout();\n  return {\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\n    hasM: layout === 'XYM' || layout === 'XYZM',\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, options) {\n  const hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n      /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\n    ],\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, options) {\n  // Esri geometries use the left-hand rule\n  const hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      polygon.getCoordinates(false)\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, options) {\n  const hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      multiLineString.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, options) {\n  const hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points: /** @type {Array<EsriJSONPosition>} */ (\n      multiPoint.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  const hasZM = getHasZM(geometry);\n  const coordinates = geometry.getCoordinates(false);\n  const output = [];\n  for (let i = 0; i < coordinates.length; i++) {\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(\n    transformGeometryWithOptions(geometry, true, options),\n    options\n  );\n}\n\nexport default EsriJSON;\n", "/**\n * @module ol/xml\n */\nimport {extend} from './array.js';\n\n/**\n * When using {@link module:ol/xml.makeChildAppender} or\n * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs\n * to have this structure.\n * @typedef {Object} NodeStackItem\n * @property {Element} node Node.\n */\n\n/**\n * @typedef {function(Element, Array<*>): void} Parser\n */\n\n/**\n * @typedef {function(Element, *, Array<*>): void} Serializer\n */\n\n/**\n * @type {string}\n */\nexport const XML_SCHEMA_INSTANCE_URI =\n  'http://www.w3.org/2001/XMLSchema-instance';\n\n/**\n * @param {string} namespaceURI Namespace URI.\n * @param {string} qualifiedName Qualified name.\n * @return {Element} Node.\n */\nexport function createElementNS(namespaceURI, qualifiedName) {\n  return getDocument().createElementNS(namespaceURI, qualifiedName);\n}\n\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @return {string} All text content.\n * @api\n */\nexport function getAllTextContent(node, normalizeWhitespace) {\n  return getAllTextContent_(node, normalizeWhitespace, []).join('');\n}\n\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array<string>} accumulator Accumulator.\n * @private\n * @return {Array<string>} Accumulator.\n */\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\n  if (\n    node.nodeType == Node.CDATA_SECTION_NODE ||\n    node.nodeType == Node.TEXT_NODE\n  ) {\n    if (normalizeWhitespace) {\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n    } else {\n      accumulator.push(node.nodeValue);\n    }\n  } else {\n    let n;\n    for (n = node.firstChild; n; n = n.nextSibling) {\n      getAllTextContent_(n, normalizeWhitespace, accumulator);\n    }\n  }\n  return accumulator;\n}\n\n/**\n * @param {Object} object Object.\n * @return {boolean} Is a document.\n */\nexport function isDocument(object) {\n  return 'documentElement' in object;\n}\n\n/**\n * @param {Element} node Node.\n * @param {?string} namespaceURI Namespace URI.\n * @param {string} name Attribute name.\n * @return {string} Value\n */\nexport function getAttributeNS(node, namespaceURI, name) {\n  return node.getAttributeNS(namespaceURI, name) || '';\n}\n\n/**\n * Parse an XML string to an XML Document.\n * @param {string} xml XML.\n * @return {Document} Document.\n * @api\n */\nexport function parse(xml) {\n  return new DOMParser().parseFromString(xml, 'application/xml');\n}\n\n/**\n * Make an array extender function for extending the array at the top of the\n * object stack.\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayExtender(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const array = /** @type {Array<*>} */ (\n          objectStack[objectStack.length - 1]\n        );\n        extend(array, value);\n      }\n    }\n  );\n}\n\n/**\n * Make an array pusher function for pushing to the array at the top of the\n * object stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayPusher(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const array = /** @type {Array<*>} */ (\n          objectStack[objectStack.length - 1]\n        );\n        array.push(value);\n      }\n    }\n  );\n}\n\n/**\n * Make an object stack replacer function for replacing the object at the\n * top of the stack.\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeReplacer(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        objectStack[objectStack.length - 1] = value;\n      }\n    }\n  );\n}\n\n/**\n * Make an object property pusher function for adding a property to the\n * object at the top of the stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [property] Property.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertyPusher(valueReader, property, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const object = /** @type {!Object} */ (\n          objectStack[objectStack.length - 1]\n        );\n        const name = property !== undefined ? property : node.localName;\n        let array;\n        if (name in object) {\n          array = object[name];\n        } else {\n          array = [];\n          object[name] = array;\n        }\n        array.push(value);\n      }\n    }\n  );\n}\n\n/**\n * Make an object property setter function.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [property] Property.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertySetter(valueReader, property, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const object = /** @type {!Object} */ (\n          objectStack[objectStack.length - 1]\n        );\n        const name = property !== undefined ? property : node.localName;\n        object[name] = value;\n      }\n    }\n  );\n}\n\n/**\n * Create a serializer that appends nodes written by its `nodeWriter` to its\n * designated parent. The parent is the `node` of the\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeChildAppender(nodeWriter, thisArg) {\n  return function (node, value, objectStack) {\n    nodeWriter.call(\n      thisArg !== undefined ? thisArg : this,\n      node,\n      value,\n      objectStack\n    );\n    const parent = /** @type {NodeStackItem} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const parentNode = parent.node;\n    parentNode.appendChild(node);\n  };\n}\n\n/**\n * Create a serializer that calls the provided `nodeWriter` from\n * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the\n * `nodeWriter` called with an array of values when the `nodeWriter` was\n * designed to serialize a single item. An example would be a LineString\n * geometry writer, which could be reused for writing MultiLineString\n * geometries.\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeArraySerializer(nodeWriter, thisArg) {\n  let serializersNS, nodeFactory;\n  return function (node, value, objectStack) {\n    if (serializersNS === undefined) {\n      serializersNS = {};\n      const serializers = {};\n      serializers[node.localName] = nodeWriter;\n      serializersNS[node.namespaceURI] = serializers;\n      nodeFactory = makeSimpleNodeFactory(node.localName);\n    }\n    serialize(serializersNS, nodeFactory, value, objectStack);\n  };\n}\n\n/**\n * Create a node factory which can use the `keys` passed to\n * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,\n * or a fixed node name. The namespace of the created nodes can either be fixed,\n * or the parent namespace will be used.\n * @param {string} [fixedNodeName] Fixed node name which will be used for all\n *     created nodes. If not provided, the 3rd argument to the resulting node\n *     factory needs to be provided and will be the nodeName.\n * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for\n *     all created nodes. If not provided, the namespace of the parent node will\n *     be used.\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\n */\nexport function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {\n  return (\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [newNodeName] Node name.\n     * @return {Node} Node.\n     */\n    function (value, objectStack, newNodeName) {\n      const context = /** @type {NodeStackItem} */ (\n        objectStack[objectStack.length - 1]\n      );\n      const node = context.node;\n      let nodeName = fixedNodeName;\n      if (nodeName === undefined) {\n        nodeName = newNodeName;\n      }\n\n      const namespaceURI =\n        fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;\n      return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\n    }\n  );\n}\n\n/**\n * A node factory that creates a node using the parent's `namespaceURI` and the\n * `nodeName` passed by {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop} to the node factory.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nexport const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\n\n/**\n * Create an array of `values` to be used with {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as\n * `key` argument.\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\n *     be a subset of the `orderedKeys`.\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\n * @return {Array<*>} Values in the order of the sequence. The resulting array\n *     has the same length as the `orderedKeys` array. Values that are not\n *     present in `object` will be `undefined` in the resulting array.\n */\nexport function makeSequence(object, orderedKeys) {\n  const length = orderedKeys.length;\n  const sequence = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    sequence[i] = object[orderedKeys[i]];\n  }\n  return sequence;\n}\n\n/**\n * Create a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object<string, T>} [structureNS] Namespaced structure to add to.\n * @return {Object<string, T>} Namespaced structure.\n * @template T\n */\nexport function makeStructureNS(namespaceURIs, structure, structureNS) {\n  structureNS = structureNS !== undefined ? structureNS : {};\n  let i, ii;\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n    structureNS[namespaceURIs[i]] = structure;\n  }\n  return structureNS;\n}\n\n/**\n * Parse a node using the parsers and object stack.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [thisArg] The object to use as `this`.\n */\nexport function parseNode(parsersNS, node, objectStack, thisArg) {\n  let n;\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    const parsers = parsersNS[n.namespaceURI];\n    if (parsers !== undefined) {\n      const parser = parsers[n.localName];\n      if (parser !== undefined) {\n        parser.call(thisArg, n, objectStack);\n      }\n    }\n  }\n}\n\n/**\n * Push an object on top of the stack, parse and return the popped object.\n * @param {T} object Object.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [thisArg] The object to use as `this`.\n * @return {T} Object.\n * @template T\n */\nexport function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {\n  objectStack.push(object);\n  parseNode(parsersNS, node, objectStack, thisArg);\n  return /** @type {T} */ (objectStack.pop());\n}\n\n/**\n * Walk through an array of `values` and call a serializer for each value.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `keys` has\n *     to match the length of `values`. For serializing a sequence, `keys`\n *     determines the order of the sequence.\n * @param {T} [thisArg] The object to use as `this` for the node factory and\n *     serializers.\n * @template T\n */\nexport function serialize(\n  serializersNS,\n  nodeFactory,\n  values,\n  objectStack,\n  keys,\n  thisArg\n) {\n  const length = (keys !== undefined ? keys : values).length;\n  let value, node;\n  for (let i = 0; i < length; ++i) {\n    value = values[i];\n    if (value !== undefined) {\n      node = nodeFactory.call(\n        thisArg !== undefined ? thisArg : this,\n        value,\n        objectStack,\n        keys !== undefined ? keys[i] : undefined\n      );\n      if (node !== undefined) {\n        serializersNS[node.namespaceURI][node.localName].call(\n          thisArg,\n          node,\n          value,\n          objectStack\n        );\n      }\n    }\n  }\n}\n\n/**\n * @param {O} object Object.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `keys` has\n *     to match the length of `values`. For serializing a sequence, `keys`\n *     determines the order of the sequence.\n * @param {T} [thisArg] The object to use as `this` for the node factory and\n *     serializers.\n * @return {O|undefined} Object.\n * @template O, T\n */\nexport function pushSerializeAndPop(\n  object,\n  serializersNS,\n  nodeFactory,\n  values,\n  objectStack,\n  keys,\n  thisArg\n) {\n  objectStack.push(object);\n  serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);\n  return /** @type {O|undefined} */ (objectStack.pop());\n}\n\nlet xmlSerializer_ = undefined;\n\n/**\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\n * where there is no globally available implementation.\n *\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\n * @api\n */\nexport function registerXMLSerializer(xmlSerializer) {\n  xmlSerializer_ = xmlSerializer;\n}\n\n/**\n * @return {XMLSerializer} The XMLSerializer.\n */\nexport function getXMLSerializer() {\n  if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\n    xmlSerializer_ = new XMLSerializer();\n  }\n  return xmlSerializer_;\n}\n\nlet document_ = undefined;\n\n/**\n * Register a Document to use when creating nodes for XML serializations. Can be used\n * to inject a Document where there is no globally available implementation.\n *\n * @param {Document} document A Document.\n * @api\n */\nexport function registerDocument(document) {\n  document_ = document;\n}\n\n/**\n * Get a document that should be used when creating nodes for XML serializations.\n * @return {Document} The document.\n */\nexport function getDocument() {\n  if (document_ === undefined && typeof document !== 'undefined') {\n    document_ = document.implementation.createDocument('', '', null);\n  }\n  return document_;\n}\n", "/**\n * @module ol/format/XMLFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport {abstract} from '../util.js';\nimport {extend} from '../array.js';\nimport {getXMLSerializer, isDocument, parse} from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\nclass XMLFeature extends FeatureFormat {\n  constructor() {\n    super();\n\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n    this.xmlSerializer_ = getXMLSerializer();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'xml';\n  }\n\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureFromDocument(doc, options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(\n        /** @type {Document} */ (source),\n        options\n      );\n    }\n    return this.readFeatureFromNode(/** @type {Element} */ (source), options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromDocument(doc, options) {\n    const features = this.readFeaturesFromDocument(doc, options);\n    if (features.length > 0) {\n      return features[0];\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeaturesFromDocument(doc, options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n        /** @type {Document} */ (source),\n        options\n      );\n    }\n    return this.readFeaturesFromNode(/** @type {Element} */ (source), options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromDocument(doc, options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    const features = [];\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(\n          features,\n          this.readFeaturesFromNode(/** @type {Element} */ (n), options)\n        );\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometry(source, options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readGeometryFromDocument(doc, options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n        /** @type {Document} */ (source),\n        options\n      );\n    }\n    return this.readGeometryFromNode(/** @type {Element} */ (source), options);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromDocument(doc, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromNode(node, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readProjectionFromNode(/** @type {Element} */ (source));\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   */\n  writeFeature(feature, options) {\n    const node = this.writeFeatureNode(feature, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @protected\n   * @return {Node} Node.\n   */\n  writeFeatureNode(feature, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Result.\n   * @api\n   */\n  writeFeatures(features, options) {\n    const node = this.writeFeaturesNode(features, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   */\n  writeFeaturesNode(features, options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   */\n  writeGeometry(geometry, options) {\n    const node = this.writeGeometryNode(geometry, options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   */\n  writeGeometryNode(geometry, options) {\n    return null; // not implemented\n  }\n}\n\nexport default XMLFeature;\n", "/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\nimport Feature from '../Feature.js';\nimport Geometry from '../geom/Geometry.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport {extend} from '../array.js';\nimport {\n  getAllTextContent,\n  getAttributeNS,\n  makeArrayPusher,\n  makeReplacer,\n  parseNode,\n  pushParseAndPop,\n} from '../xml.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n */\nexport const GMLNS = 'http://www.opengis.net/gml';\n\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc.\n *\n * @const\n * @type {RegExp}\n */\nconst ONLY_WHITESPACE_RE = /^\\s*$/;\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] Feature\n * namespace. If not defined will be derived from GML. If multiple\n * feature types have been configured which come from different feature\n * namespaces, this will be an object with the keys being the prefixes used\n * in the entries of featureType array. The values of the object will be the\n * feature namespaces themselves. So for instance there might be a featureType\n * item `topp:states` in the `featureType` array and then there will be a key\n * `topp` in the featureNS object with value `http://www.openplans.org/topp`.\n * @property {Array<string>|string} [featureType] Feature type(s) to parse.\n * If multiple feature types need to be configured\n * which come from different feature namespaces, `featureNS` will be an object\n * with the keys being the prefixes used in the entries of featureType array.\n * The values of the object will be the feature namespaces themselves.\n * So for instance there might be a featureType item `topp:states` and then\n * there will be a key named `topp` in the featureNS object with value\n * `http://www.openplans.org/topp`.\n * @property {string} [srsName] srsName to use when writing geometries.\n * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.\n * Since the latter is deprecated in GML 3.\n * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of\n * gml:MultiPolygon. Since the latter is deprecated in GML 3.\n * @property {string} [schemaLocation] Optional schemaLocation to use when\n * writing out the GML, this will override the default provided.\n * @property {boolean} [hasZ=false] If coordinates have a Z value.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes GML2 and GML3.\n *\n * @abstract\n * @api\n */\nclass GMLBase extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @protected\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType = options.featureType;\n\n    /**\n     * @protected\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS = options.featureNS;\n\n    /**\n     * @protected\n     * @type {string|undefined}\n     */\n    this.srsName = options.srsName;\n\n    /**\n     * @protected\n     * @type {string}\n     */\n    this.schemaLocation = '';\n\n    /**\n     * @type {Object<string, Object<string, Object>>}\n     */\n    this.FEATURE_COLLECTION_PARSERS = {};\n    this.FEATURE_COLLECTION_PARSERS[this.namespace] = {\n      'featureMember': makeArrayPusher(this.readFeaturesInternal),\n      'featureMembers': makeReplacer(this.readFeaturesInternal),\n    };\n\n    this.supportedMediaTypes = ['application/gml+xml'];\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<Feature> | undefined} Features.\n   */\n  readFeaturesInternal(node, objectStack) {\n    const localName = node.localName;\n    let features = null;\n    if (localName == 'FeatureCollection') {\n      features = pushParseAndPop(\n        [],\n        this.FEATURE_COLLECTION_PARSERS,\n        node,\n        objectStack,\n        this\n      );\n    } else if (\n      localName == 'featureMembers' ||\n      localName == 'featureMember' ||\n      localName == 'member'\n    ) {\n      const context = objectStack[0];\n      let featureType = context['featureType'];\n      let featureNS = context['featureNS'];\n      const prefix = 'p';\n      const defaultPrefix = 'p0';\n      if (!featureType && node.childNodes) {\n        (featureType = []), (featureNS = {});\n        for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {\n          const child = /** @type {Element} */ (node.childNodes[i]);\n          if (child.nodeType === 1) {\n            const ft = child.nodeName.split(':').pop();\n            if (!featureType.includes(ft)) {\n              let key = '';\n              let count = 0;\n              const uri = child.namespaceURI;\n              for (const candidate in featureNS) {\n                if (featureNS[candidate] === uri) {\n                  key = candidate;\n                  break;\n                }\n                ++count;\n              }\n              if (!key) {\n                key = prefix + count;\n                featureNS[key] = uri;\n              }\n              featureType.push(key + ':' + ft);\n            }\n          }\n        }\n        if (localName != 'featureMember') {\n          // recheck featureType for each featureMember\n          context['featureType'] = featureType;\n          context['featureNS'] = featureNS;\n        }\n      }\n      if (typeof featureNS === 'string') {\n        const ns = featureNS;\n        featureNS = {};\n        featureNS[defaultPrefix] = ns;\n      }\n      /** @type {Object<string, Object<string, import(\"../xml.js\").Parser>>} */\n      const parsersNS = {};\n      const featureTypes = Array.isArray(featureType)\n        ? featureType\n        : [featureType];\n      for (const p in featureNS) {\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        for (let i = 0, ii = featureTypes.length; i < ii; ++i) {\n          const featurePrefix = featureTypes[i].includes(':')\n            ? featureTypes[i].split(':')[0]\n            : defaultPrefix;\n          if (featurePrefix === p) {\n            parsers[featureTypes[i].split(':').pop()] =\n              localName == 'featureMembers'\n                ? makeArrayPusher(this.readFeatureElement, this)\n                : makeReplacer(this.readFeatureElement, this);\n          }\n        }\n        parsersNS[featureNS[p]] = parsers;\n      }\n      if (localName == 'featureMember' || localName == 'member') {\n        features = pushParseAndPop(undefined, parsersNS, node, objectStack);\n      } else {\n        features = pushParseAndPop([], parsersNS, node, objectStack);\n      }\n    }\n    if (features === null) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent|undefined} Geometry.\n   */\n  readGeometryOrExtent(node, objectStack) {\n    const context = /** @type {Object} */ (objectStack[0]);\n    context['srsName'] = node.firstElementChild.getAttribute('srsName');\n    context['srsDimension'] =\n      node.firstElementChild.getAttribute('srsDimension');\n    return pushParseAndPop(\n      null,\n      this.GEOMETRY_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Geometry.\n   */\n  readExtentElement(node, objectStack) {\n    const context = /** @type {Object} */ (objectStack[0]);\n    const extent = /** @type {import(\"../extent.js\").Extent} */ (\n      this.readGeometryOrExtent(node, objectStack)\n    );\n    return extent ? transformExtentWithOptions(extent, context) : undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../geom/Geometry.js\").default|undefined} Geometry.\n   */\n  readGeometryElement(node, objectStack) {\n    const context = /** @type {Object} */ (objectStack[0]);\n    const geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n      this.readGeometryOrExtent(node, objectStack)\n    );\n    return geometry\n      ? transformGeometryWithOptions(geometry, false, context)\n      : undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {boolean} asFeature whether result should be wrapped as a feature.\n   * @return {Feature|Object} Feature\n   */\n  readFeatureElementInternal(node, objectStack, asFeature) {\n    let geometryName;\n    const values = {};\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      let value;\n      const localName = n.localName;\n      // first, check if it is simple attribute\n      if (\n        n.childNodes.length === 0 ||\n        (n.childNodes.length === 1 &&\n          (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))\n      ) {\n        value = getAllTextContent(n, false);\n        if (ONLY_WHITESPACE_RE.test(value)) {\n          value = undefined;\n        }\n      } else {\n        if (asFeature) {\n          //if feature, try it as a geometry or extent\n          value =\n            localName === 'boundedBy'\n              ? this.readExtentElement(n, objectStack)\n              : this.readGeometryElement(n, objectStack);\n        }\n        if (!value) {\n          //if not a geometry or not a feature, treat it as a complex attribute\n          value = this.readFeatureElementInternal(n, objectStack, false);\n        } else if (localName !== 'boundedBy') {\n          // boundedBy is an extent and must not be considered as a geometry\n          geometryName = localName;\n        }\n      }\n\n      const len = n.attributes.length;\n      if (len > 0 && !(value instanceof Geometry)) {\n        value = {_content_: value};\n        for (let i = 0; i < len; i++) {\n          const attName = n.attributes[i].name;\n          value[attName] = n.attributes[i].value;\n        }\n      }\n\n      if (values[localName]) {\n        if (!(values[localName] instanceof Array)) {\n          values[localName] = [values[localName]];\n        }\n        values[localName].push(value);\n      } else {\n        values[localName] = value;\n      }\n    }\n    if (!asFeature) {\n      return values;\n    }\n    const feature = new Feature(values);\n    if (geometryName) {\n      feature.setGeometryName(geometryName);\n    }\n    const fid =\n      node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');\n    if (fid) {\n      feature.setId(fid);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Feature} Feature.\n   */\n  readFeatureElement(node, objectStack) {\n    return this.readFeatureElementInternal(node, objectStack, true);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Point|undefined} Point.\n   */\n  readPoint(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      return new Point(flatCoordinates, 'XYZ');\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPoint|undefined} MultiPoint.\n   */\n  readMultiPoint(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const coordinates = pushParseAndPop(\n      [],\n      this.MULTIPOINT_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (coordinates) {\n      return new MultiPoint(coordinates);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiLineString(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTILINESTRING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      return new MultiLineString(lineStrings);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiPolygon(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTIPOLYGON_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  pointMemberParser(node, objectStack) {\n    parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  lineStringMemberParser(node, objectStack) {\n    parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  polygonMemberParser(node, objectStack) {\n    parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readLineString(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} LinearRing flat coordinates.\n   */\n  readFlatLinearRing(node, objectStack) {\n    const ring = pushParseAndPop(\n      null,\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (ring) {\n      return ring;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LinearRing|undefined} LinearRing.\n   */\n  readLinearRing(node, objectStack) {\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n    if (flatCoordinates) {\n      return new LinearRing(flatCoordinates, 'XYZ');\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readPolygon(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>} Flat coordinates.\n   */\n  readFlatCoordinatesFromNode(node, objectStack) {\n    return pushParseAndPop(\n      null,\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromNode(node, options) {\n    const geometry = this.readGeometryElement(node, [\n      this.getReadOptions(node, options ? options : {}),\n    ]);\n    return geometry ? geometry : null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    const internalOptions = {\n      featureType: this.featureType,\n      featureNS: this.featureNS,\n    };\n    if (internalOptions) {\n      Object.assign(internalOptions, this.getReadOptions(node, options));\n    }\n    const features = this.readFeaturesInternal(node, [internalOptions]);\n    return features || [];\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    return getProjection(\n      this.srsName\n        ? this.srsName\n        : node.firstElementChild.getAttribute('srsName')\n    );\n  }\n}\n\nGMLBase.prototype.namespace = GMLNS;\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {},\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {},\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {},\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n  },\n};\n\nexport default GMLBase;\n", "/**\n * @module ol/format/xsd\n */\nimport {getAllTextContent, getDocument} from '../xml.js';\nimport {padNumber} from '../string.js';\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n  const s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n  const s = getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n  const s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readPositiveInteger(node) {\n  const s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, bool ? '1' : '0');\n}\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n  node.appendChild(getDocument().createCDATASection(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string =\n    date.getUTCFullYear() +\n    '-' +\n    padNumber(date.getUTCMonth() + 1, 2) +\n    '-' +\n    padNumber(date.getUTCDate(), 2) +\n    'T' +\n    padNumber(date.getUTCHours(), 2) +\n    ':' +\n    padNumber(date.getUTCMinutes(), 2) +\n    ':' +\n    padNumber(date.getUTCSeconds(), 2) +\n    'Z';\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n  node.appendChild(getDocument().createTextNode(string));\n}\n", "/**\n * @module ol/format/GML2\n */\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  createElementNS,\n  getAllTextContent,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport {writeStringTextNode} from './xsd.js';\n\n/**\n * @const\n * @type {string}\n */\nconst schemaLocation =\n  GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nclass GML2 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(\n      this.readFeaturesInternal\n    );\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatCoordinates(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n      objectStack[0]\n    );\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n    const coordsGroups = s.trim().split(/\\s+/);\n    const flatCoordinates = [];\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n      const coords = coordsGroups[i].split(/,+/);\n      const x = parseFloat(coords[0]);\n      const y = parseFloat(coords[1]);\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readBox(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.BOX_PARSERS_,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[1][3],\n      flatCoordinates[1][4]\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  innerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  outerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n  createCoordinatesNode_(namespaceURI) {\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n\n    return coordinates;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCoordinates_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ',' + point[1]\n        : point[1] + ',' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    const point = geometry.getCoordinates();\n    const coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      'http://www.opengis.net/gml',\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\nexport default GML2;\n", "/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1]\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ' ' + point[1]\n        : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this\n    );\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n", "/**\n * @module ol/format/GML\n */\nimport GML3 from './GML3.js';\n\n/**\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @class\n * @param {import(\"./GMLBase.js\").Options} [options]\n *     Optional configuration object.\n * @api\n */\nconst GML = GML3;\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML.prototype.writeFeatures;\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {Node} Node.\n * @api\n */\nGML.prototype.writeFeaturesNode;\n\nexport default GML;\n", "/**\n * @module ol/format/GPX\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport Point from '../geom/Point.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  makeArrayPusher,\n  makeArraySerializer,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSequence,\n  makeSimpleNodeFactory,\n  makeStructureNS,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readDateTime,\n  readDecimal,\n  readPositiveInteger,\n  readString,\n  writeDateTimeTextNode,\n  writeDecimalTextNode,\n  writeNonNegativeIntegerTextNode,\n  writeStringTextNode,\n} from './xsd.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [\n  null,\n  'http://www.topografix.com/GPX/1/0',\n  'http://www.topografix.com/GPX/1/1',\n];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION =\n  'http://www.topografix.com/GPX/1/1 ' +\n  'http://www.topografix.com/GPX/1/1/gpx.xsd';\n\n/**\n * @const\n * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}\n */\nconst FEATURE_READER = {\n  'rte': readRte,\n  'trk': readTrk,\n  'wpt': readWpt,\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GPX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeArrayPusher(readRte),\n  'trk': makeArrayPusher(readTrk),\n  'wpt': makeArrayPusher(readWpt),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeObjectPropertySetter(readString, 'linkText'),\n  'type': makeObjectPropertySetter(readString, 'linkType'),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeChildAppender(writeRte),\n  'trk': makeChildAppender(writeTrk),\n  'wpt': makeChildAppender(writeWpt),\n});\n\n/**\n * @typedef {Object} Options\n * @property {function(Feature, Node):void} [readExtensions] Callback function\n * to process `extensions` nodes. To prevent memory leaks, this callback function must\n * not store any references to the node. Note that the `extensions`\n * node is not allowed in GPX 1.0. Moreover, only `extensions`\n * nodes from `wpt`, `rte` and `trk` can be processed, as those are\n * directly mapped to a feature.\n */\n\n/**\n * @typedef {Object} LayoutOptions\n * @property {boolean} [hasZ] HasZ.\n * @property {boolean} [hasM] HasM.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GPX format.\n *\n * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\n * feature of the source.\n *\n * When reading, routes (`<rte>`) are converted into LineString geometries, and\n * tracks (`<trk>`) into MultiLineString. Any properties on route and track\n * waypoints are ignored.\n *\n * When writing, LineString geometries are output as routes (`<rte>`), and\n * MultiLineString as tracks (`<trk>`).\n *\n * @api\n */\nclass GPX extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @type {function(Feature, Node): void|undefined}\n     * @private\n     */\n    this.readExtensions_ = options.readExtensions;\n  }\n\n  /**\n   * @param {Array<Feature>} features List of features.\n   * @private\n   */\n  handleReadExtensions_(features) {\n    if (!features) {\n      features = [];\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      const feature = features[i];\n      if (this.readExtensions_) {\n        const extensionsNode = feature.get('extensionsNode_') || null;\n        this.readExtensions_(feature, extensionsNode);\n      }\n      feature.set('extensionsNode_', undefined);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const featureReader = FEATURE_READER[node.localName];\n    if (!featureReader) {\n      return null;\n    }\n    const feature = featureReader(node, [this.getReadOptions(node, options)]);\n    if (!feature) {\n      return null;\n    }\n    this.handleReadExtensions_([feature]);\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    if (node.localName == 'gpx') {\n      /** @type {Array<Feature>} */\n      const features = pushParseAndPop([], GPX_PARSERS, node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (features) {\n        this.handleReadExtensions_(features);\n        return features;\n      }\n      return [];\n    }\n    return [];\n  }\n\n  /**\n   * Encode an array of features in the GPX format as an XML node.\n   * LineString geometries are output as routes (`<rte>`), and MultiLineString\n   * as tracks (`<trk>`).\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    //FIXME Serialize metadata\n    const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    gpx.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATION\n    );\n    gpx.setAttribute('version', '1.1');\n    gpx.setAttribute('creator', 'OpenLayers');\n\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: gpx}),\n      GPX_SERIALIZERS,\n      GPX_NODE_FACTORY,\n      features,\n      [options]\n    );\n    return gpx;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions,\n  'type': makeObjectPropertySetter(readString),\n  'rtept': parseRtePt,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'type': makeObjectPropertySetter(readString),\n  'extensions': parseExtensions,\n  'trkseg': parseTrkSeg,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': parseTrkPt,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n  'magvar': makeObjectPropertySetter(readDecimal),\n  'geoidheight': makeObjectPropertySetter(readDecimal),\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'sym': makeObjectPropertySetter(readString),\n  'type': makeObjectPropertySetter(readString),\n  'fix': makeObjectPropertySetter(readString),\n  'sat': makeObjectPropertySetter(readPositiveInteger),\n  'hdop': makeObjectPropertySetter(readDecimal),\n  'vdop': makeObjectPropertySetter(readDecimal),\n  'pdop': makeObjectPropertySetter(readDecimal),\n  'ageofdgpsdata': makeObjectPropertySetter(readDecimal),\n  'dgpsid': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions,\n});\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst LINK_SEQUENCE = ['text', 'type'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'number',\n  'type',\n  'rtept',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'rtept': makeArraySerializer(makeChildAppender(writeWptType)),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'number',\n  'type',\n  'trkseg',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg)),\n});\n\n/**\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': makeChildAppender(writeWptType),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'ele',\n  'time',\n  'magvar',\n  'geoidheight',\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'sym',\n  'type',\n  'fix',\n  'sat',\n  'hdop',\n  'vdop',\n  'pdop',\n  'ageofdgpsdata',\n  'dgpsid',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeChildAppender(writeDecimalTextNode),\n  'time': makeChildAppender(writeDateTimeTextNode),\n  'magvar': makeChildAppender(writeDecimalTextNode),\n  'geoidheight': makeChildAppender(writeDecimalTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'sym': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'fix': makeChildAppender(writeStringTextNode),\n  'sat': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'hdop': makeChildAppender(writeDecimalTextNode),\n  'vdop': makeChildAppender(writeDecimalTextNode),\n  'pdop': makeChildAppender(writeDecimalTextNode),\n  'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),\n  'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'wpt',\n  'LineString': 'rte',\n  'MultiLineString': 'trk',\n};\n\n/**\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nfunction GPX_NODE_FACTORY(value, objectStack, nodeName) {\n  const geometry = /** @type {Feature} */ (value).getGeometry();\n  if (geometry) {\n    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\n    if (nodeName) {\n      const parentNode = objectStack[objectStack.length - 1].node;\n      return createElementNS(parentNode.namespaceURI, nodeName);\n    }\n  }\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Element} node Node.\n * @param {!Object} values Values.\n * @return {Array<number>} Flat coordinates.\n */\nfunction appendCoordinate(flatCoordinates, layoutOptions, node, values) {\n  flatCoordinates.push(\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat'))\n  );\n  if ('ele' in values) {\n    flatCoordinates.push(/** @type {number} */ (values['ele']));\n    delete values['ele'];\n    layoutOptions.hasZ = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  if ('time' in values) {\n    flatCoordinates.push(/** @type {number} */ (values['time']));\n    delete values['time'];\n    layoutOptions.hasM = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  return flatCoordinates;\n}\n\n/**\n * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\n * and ends arrays by shrinking them accordingly (removing unused zero entries).\n *\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {Array<number>} [ends] Ends.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} Layout.\n */\nfunction applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  let stride = 2;\n  if (layoutOptions.hasZ && layoutOptions.hasM) {\n    layout = 'XYZM';\n    stride = 4;\n  } else if (layoutOptions.hasZ) {\n    layout = 'XYZ';\n    stride = 3;\n  } else if (layoutOptions.hasM) {\n    layout = 'XYM';\n    stride = 3;\n  }\n  if (stride !== 4) {\n    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\n      flatCoordinates[i * stride] = flatCoordinates[i * 4];\n      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\n      if (layoutOptions.hasZ) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\n      }\n      if (layoutOptions.hasM) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\n      }\n    }\n    flatCoordinates.length = (flatCoordinates.length / 4) * stride;\n    if (ends) {\n      for (let i = 0, ii = ends.length; i < ii; i++) {\n        ends[i] = (ends[i] / 4) * stride;\n      }\n    }\n  }\n  return layout;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseLink(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const href = node.getAttribute('href');\n  if (href !== null) {\n    values['link'] = href;\n  }\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseExtensions(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values['extensionsNode_'] = node;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseRtePt(node, objectStack) {\n  const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\n  if (values) {\n    const rteValues = /** @type {!Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const flatCoordinates = /** @type {Array<number>} */ (\n      rteValues['flatCoordinates']\n    );\n    const layoutOptions = /** @type {LayoutOptions} */ (\n      rteValues['layoutOptions']\n    );\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkPt(node, objectStack) {\n  const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\n  if (values) {\n    const trkValues = /** @type {!Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const flatCoordinates = /** @type {Array<number>} */ (\n      trkValues['flatCoordinates']\n    );\n    const layoutOptions = /** @type {LayoutOptions} */ (\n      trkValues['layoutOptions']\n    );\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkSeg(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  parseNode(TRKSEG_PARSERS, node, objectStack);\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  const ends = /** @type {Array<number>} */ (values['ends']);\n  ends.push(flatCoordinates.length);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readRte(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop(\n    {\n      'flatCoordinates': [],\n      'layoutOptions': {},\n    },\n    RTE_PARSERS,\n    node,\n    objectStack\n  );\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  delete values['flatCoordinates'];\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\n  const geometry = new LineString(flatCoordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readTrk(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop(\n    {\n      'flatCoordinates': [],\n      'ends': [],\n      'layoutOptions': {},\n    },\n    TRK_PARSERS,\n    node,\n    objectStack\n  );\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  delete values['flatCoordinates'];\n  const ends = /** @type {Array<number>} */ (values['ends']);\n  delete values['ends'];\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\n  const geometry = new MultiLineString(flatCoordinates, layout, ends);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Waypoint.\n */\nfunction readWpt(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);\n  if (!values) {\n    return undefined;\n  }\n  const layoutOptions = /** @type {LayoutOptions} */ ({});\n  const coordinates = appendCoordinate([], layoutOptions, node, values);\n  const layout = applyLayoutOptions(layoutOptions, coordinates);\n  const geometry = new Point(coordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {string} value Value for the link's `href` attribute.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLink(node, value, objectStack) {\n  node.setAttribute('href', value);\n  const context = objectStack[objectStack.length - 1];\n  const properties = context['properties'];\n  const link = [properties['linkText'], properties['linkType']];\n  pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */ ({node: node}),\n    LINK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    link,\n    objectStack,\n    LINK_SEQUENCE\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWptType(node, coordinate, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const namespaceURI = parentNode.namespaceURI;\n  const properties = context['properties'];\n  //FIXME Projection handling\n  node.setAttributeNS(null, 'lat', String(coordinate[1]));\n  node.setAttributeNS(null, 'lon', String(coordinate[0]));\n  const geometryLayout = context['geometryLayout'];\n  switch (geometryLayout) {\n    case 'XYZM':\n      if (coordinate[3] !== 0) {\n        properties['time'] = coordinate[3];\n      }\n    // fall through\n    case 'XYZ':\n      if (coordinate[2] !== 0) {\n        properties['ele'] = coordinate[2];\n      }\n      break;\n    case 'XYM':\n      if (coordinate[2] !== 0) {\n        properties['time'] = coordinate[2];\n      }\n      break;\n    default:\n    // pass\n  }\n  const orderedKeys =\n    node.nodeName == 'rtept'\n      ? RTEPT_TYPE_SEQUENCE[namespaceURI]\n      : WPT_TYPE_SEQUENCE[namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    ({node: node, 'properties': properties}),\n    WPT_TYPE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeRte(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const properties = feature.getProperties();\n  const context = {node: node};\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'LineString') {\n    const lineString = /** @type {LineString} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    context['geometryLayout'] = lineString.getLayout();\n    properties['rtept'] = lineString.getCoordinates();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    RTE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrk(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const properties = feature.getProperties();\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'MultiLineString') {\n    const multiLineString = /** @type {MultiLineString} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    properties['trkseg'] = multiLineString.getLineStrings();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    TRK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {LineString} lineString LineString.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrkSeg(node, lineString, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  context['geometryLayout'] = lineString.getLayout();\n  context['properties'] = {};\n  pushSerializeAndPop(\n    context,\n    TRKSEG_SERIALIZERS,\n    TRKSEG_NODE_FACTORY,\n    lineString.getCoordinates(),\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWpt(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const context = objectStack[objectStack.length - 1];\n  context['properties'] = feature.getProperties();\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'Point') {\n    const point = /** @type {Point} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    context['geometryLayout'] = point.getLayout();\n    writeWptType(node, point.getCoordinates(), objectStack);\n  }\n}\n\nexport default GPX;\n", "/**\n * @module ol/format/TextFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @abstract\n */\nclass TextFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'text';\n  }\n\n  /**\n   * Read the feature from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the features from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the geometry from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromText(getText(source));\n  }\n\n  /**\n   * @param {string} text Text.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n  readProjectionFromText(text) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Encode a feature as a string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return this.writeFeatureText(feature, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeatureText(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return this.writeFeaturesText(features, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeaturesText(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return this.writeGeometryText(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeGeometryText(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {string} Text.\n */\nfunction getText(source) {\n  if (typeof source === 'string') {\n    return source;\n  }\n  return '';\n}\n\nexport default TextFeature;\n", "/**\n * @module ol/format/IGC\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport {get as getProjection} from '../proj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {'barometric' | 'gps' | 'none'} IGCZ\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\n */\n\n/**\n * @const\n * @type {RegExp}\n */\nconst B_RECORD_RE =\n  /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\n\n/**\n * @const\n * @type {RegExp}\n */\nconst H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\n\n/**\n * @const\n * @type {RegExp}\n */\nconst HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\n\n/**\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\n *\n * @const\n * @type {RegExp}\n */\nconst NEWLINE_RE = /\\r\\n|\\r|\\n/;\n\n/**\n * @typedef {Object} Options\n * @property {IGCZ} [altitudeMode='none'] Altitude mode. Possible\n * values are `'barometric'`, `'gps'`, and `'none'`.\n */\n\n/**\n * @classdesc\n * Feature format for `*.igc` flight recording files.\n *\n * As IGC sources contain a single feature,\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\n * array\n *\n * @api\n */\nclass IGC extends TextFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {IGCZ}\n     */\n    this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : 'none';\n  }\n\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    const altitudeMode = this.altitudeMode_;\n    const lines = text.split(NEWLINE_RE);\n    /** @type {Object<string, string>} */\n    const properties = {};\n    const flatCoordinates = [];\n    let year = 2000;\n    let month = 0;\n    let day = 1;\n    let lastDateTime = -1;\n    let i, ii;\n    for (i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      let m;\n      if (line.charAt(0) == 'B') {\n        m = B_RECORD_RE.exec(line);\n        if (m) {\n          const hour = parseInt(m[1], 10);\n          const minute = parseInt(m[2], 10);\n          const second = parseInt(m[3], 10);\n          let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\n          if (m[6] == 'S') {\n            y = -y;\n          }\n          let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\n          if (m[9] == 'W') {\n            x = -x;\n          }\n          flatCoordinates.push(x, y);\n          if (altitudeMode != 'none') {\n            let z;\n            if (altitudeMode == 'gps') {\n              z = parseInt(m[11], 10);\n            } else if (altitudeMode == 'barometric') {\n              z = parseInt(m[12], 10);\n            } else {\n              z = 0;\n            }\n            flatCoordinates.push(z);\n          }\n          let dateTime = Date.UTC(year, month, day, hour, minute, second);\n          // Detect UTC midnight wrap around.\n          if (dateTime < lastDateTime) {\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\n          }\n          flatCoordinates.push(dateTime / 1000);\n          lastDateTime = dateTime;\n        }\n      } else if (line.charAt(0) == 'H') {\n        m = HFDTE_RECORD_RE.exec(line);\n        if (m) {\n          day = parseInt(m[1], 10);\n          month = parseInt(m[2], 10) - 1;\n          year = 2000 + parseInt(m[3], 10);\n        } else {\n          m = H_RECORD_RE.exec(line);\n          if (m) {\n            properties[m[1]] = m[2].trim();\n          }\n        }\n      }\n    }\n    if (flatCoordinates.length === 0) {\n      return null;\n    }\n    const layout = altitudeMode == 'none' ? 'XYM' : 'XYZM';\n    const lineString = new LineString(flatCoordinates, layout);\n    const feature = new Feature(\n      transformGeometryWithOptions(lineString, false, options)\n    );\n    feature.setProperties(properties, true);\n    return feature;\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    const feature = this.readFeatureFromText(text, options);\n    if (feature) {\n      return [feature];\n    }\n    return [];\n  }\n}\n\nexport default IGC;\n", "/**\n * @module ol/format/KML\n */\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport Icon from '../style/Icon.js';\nimport ImageState from '../ImageState.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  isDocument,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeReplacer,\n  makeSequence,\n  makeSimpleNodeFactory,\n  makeStructureNS,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readBoolean,\n  readDecimal,\n  readString,\n  writeBooleanTextNode,\n  writeCDATASection,\n  writeDecimalTextNode,\n  writeStringTextNode,\n} from './xsd.js';\nimport {toRadians} from '../math.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {Object} Vec2\n * @property {number} x X coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} xunits Units of x.\n * @property {number} y Y coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} yunits Units of Y.\n * @property {import(\"../style/Icon.js\").IconOrigin} [origin] Origin.\n */\n\n/**\n * @typedef {Object} GxTrackObject\n * @property {Array<Array<number>>} coordinates Coordinates.\n * @property {Array<number>} whens Whens.\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [\n  null,\n  'http://earth.google.com/kml/2.0',\n  'http://earth.google.com/kml/2.1',\n  'http://earth.google.com/kml/2.2',\n  'http://www.opengis.net/kml/2.2',\n];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION =\n  'http://www.opengis.net/kml/2.2 ' +\n  'https://developers.google.com/kml/schema/kml22gx.xsd';\n\n/**\n * @type {Object<string, import(\"../style/Icon.js\").IconAnchorUnits>}\n */\nconst ICON_ANCHOR_UNITS_MAP = {\n  'fraction': 'fraction',\n  'pixels': 'pixels',\n  'insetPixels': 'pixels',\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PLACEMARK_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'ExtendedData': extendedDataParser,\n    'Region': regionParser,\n    'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),\n    'LineString': makeObjectPropertySetter(readLineString, 'geometry'),\n    'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),\n    'Point': makeObjectPropertySetter(readPoint, 'geometry'),\n    'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),\n    'Style': makeObjectPropertySetter(readStyle),\n    'StyleMap': placemarkStyleMapParser,\n    'address': makeObjectPropertySetter(readString),\n    'description': makeObjectPropertySetter(readString),\n    'name': makeObjectPropertySetter(readString),\n    'open': makeObjectPropertySetter(readBoolean),\n    'phoneNumber': makeObjectPropertySetter(readString),\n    'styleUrl': makeObjectPropertySetter(readStyleURL),\n    'visibility': makeObjectPropertySetter(readBoolean),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),\n    'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': extendedDataParser,\n  'Region': regionParser,\n  'Link': linkParser,\n  'address': makeObjectPropertySetter(readString),\n  'description': makeObjectPropertySetter(readString),\n  'name': makeObjectPropertySetter(readString),\n  'open': makeObjectPropertySetter(readBoolean),\n  'phoneNumber': makeObjectPropertySetter(readString),\n  'visibility': makeObjectPropertySetter(readBoolean),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'href': makeObjectPropertySetter(readURI),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LatLonAltBox': latLonAltBoxParser,\n  'Lod': lodParser,\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Document': makeChildAppender(writeDocument),\n  'Placemark': makeChildAppender(writePlacemark),\n});\n\n/**\n * @type {import(\"../color.js\").Color}\n */\nlet DEFAULT_COLOR;\n\n/**\n * @type {Fill|null}\n */\nlet DEFAULT_FILL_STYLE = null;\n\n/**\n * Get the default fill style (or null if not yet set).\n * @return {Fill|null} The default fill style.\n */\nexport function getDefaultFillStyle() {\n  return DEFAULT_FILL_STYLE;\n}\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_SIZE;\n\n/**\n * @type {string}\n */\nlet DEFAULT_IMAGE_STYLE_SRC;\n\n/**\n * @type {import(\"../style/Image.js\").default|null}\n */\nlet DEFAULT_IMAGE_STYLE = null;\n\n/**\n * Get the default image style (or null if not yet set).\n * @return {import(\"../style/Image.js\").default|null} The default image style.\n */\nexport function getDefaultImageStyle() {\n  return DEFAULT_IMAGE_STYLE;\n}\n\n/**\n * @type {string}\n */\nlet DEFAULT_NO_IMAGE_STYLE;\n\n/**\n * @type {Stroke|null}\n */\nlet DEFAULT_STROKE_STYLE = null;\n\n/**\n * Get the default stroke style (or null if not yet set).\n * @return {Stroke|null} The default stroke style.\n */\nexport function getDefaultStrokeStyle() {\n  return DEFAULT_STROKE_STYLE;\n}\n\n/**\n * @type {Stroke}\n */\nlet DEFAULT_TEXT_STROKE_STYLE;\n\n/**\n * @type {Text|null}\n */\nlet DEFAULT_TEXT_STYLE = null;\n\n/**\n * Get the default text style (or null if not yet set).\n * @return {Text|null} The default text style.\n */\nexport function getDefaultTextStyle() {\n  return DEFAULT_TEXT_STYLE;\n}\n\n/**\n * @type {Style|null}\n */\nlet DEFAULT_STYLE = null;\n\n/**\n * Get the default style (or null if not yet set).\n * @return {Style|null} The default style.\n */\nexport function getDefaultStyle() {\n  return DEFAULT_STYLE;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet DEFAULT_STYLE_ARRAY = null;\n\n/**\n * Get the default style array (or null if not yet set).\n * @return {Array<Style>|null} The default style.\n */\nexport function getDefaultStyleArray() {\n  return DEFAULT_STYLE_ARRAY;\n}\n\n/**\n * Function that returns the scale needed to normalize an icon image to 32 pixels.\n * @param {import(\"../size.js\").Size} size Image size.\n * @return {number} Scale.\n */\nfunction scaleForSize(size) {\n  return 32 / Math.min(size[0], size[1]);\n}\n\nfunction createStyleDefaults() {\n  DEFAULT_COLOR = [255, 255, 255, 1];\n\n  DEFAULT_FILL_STYLE = new Fill({\n    color: DEFAULT_COLOR,\n  });\n\n  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];\n\n  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';\n\n  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';\n\n  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\n\n  DEFAULT_IMAGE_STYLE_SRC =\n    'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\n\n  DEFAULT_IMAGE_STYLE = new Icon({\n    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\n    anchorOrigin: 'bottom-left',\n    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\n    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\n    crossOrigin: 'anonymous',\n    rotation: 0,\n    scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),\n    size: DEFAULT_IMAGE_STYLE_SIZE,\n    src: DEFAULT_IMAGE_STYLE_SRC,\n  });\n\n  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\n\n  DEFAULT_STROKE_STYLE = new Stroke({\n    color: DEFAULT_COLOR,\n    width: 1,\n  });\n\n  DEFAULT_TEXT_STROKE_STYLE = new Stroke({\n    color: [51, 51, 51, 1],\n    width: 2,\n  });\n\n  DEFAULT_TEXT_STYLE = new Text({\n    font: 'bold 16px Helvetica',\n    fill: DEFAULT_FILL_STYLE,\n    stroke: DEFAULT_TEXT_STROKE_STYLE,\n    scale: 0.8,\n  });\n\n  DEFAULT_STYLE = new Style({\n    fill: DEFAULT_FILL_STYLE,\n    image: DEFAULT_IMAGE_STYLE,\n    text: DEFAULT_TEXT_STYLE,\n    stroke: DEFAULT_STROKE_STYLE,\n    zIndex: 0,\n  });\n\n  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\n}\n\n/**\n * @type {HTMLTextAreaElement}\n */\nlet TEXTAREA;\n\n/**\n * A function that takes a url `{string}` and returns a url `{string}`.\n * Might be used to change an icon path or to substitute a\n * data url obtained from a KMZ array buffer.\n *\n * @typedef {function(string):string} IconUrlFunction\n * @api\n */\n\n/**\n * Function that returns a url unchanged.\n * @param {string} href Input url.\n * @return {string} Output url.\n */\nfunction defaultIconUrlFunction(href) {\n  return href;\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [extractStyles=true] Extract styles from the KML.\n * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\n * @property {Array<Style>} [defaultStyle] Default style. The\n * default default style is the same as Google Earth.\n * @property {boolean} [writeStyles=true] Write styles into KML.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.\n * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the KML format.\n *\n * {@link module:ol/format/KML~KML#readFeature} will read the first feature from\n * a KML source.\n *\n * MultiGeometries are converted into GeometryCollections if they are a mix of\n * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are\n * all of the same type.\n *\n * @api\n */\nclass KML extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    if (!DEFAULT_STYLE_ARRAY) {\n      createStyleDefaults();\n    }\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {Array<Style>}\n     */\n    this.defaultStyle_ = options.defaultStyle\n      ? options.defaultStyle\n      : DEFAULT_STYLE_ARRAY;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.extractStyles_ =\n      options.extractStyles !== undefined ? options.extractStyles : true;\n\n    /**\n     * @type {boolean}\n     */\n    this.writeStyles_ =\n      options.writeStyles !== undefined ? options.writeStyles : true;\n\n    /**\n     * @private\n     * @type {!Object<string, (Array<Style>|string)>}\n     */\n    this.sharedStyles_ = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.showPointNames_ =\n      options.showPointNames !== undefined ? options.showPointNames : true;\n\n    /**\n     * @type {null|string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    /**\n     * @type {IconUrlFunction}\n     */\n    this.iconUrlFunction_ = options.iconUrlFunction\n      ? options.iconUrlFunction\n      : defaultIconUrlFunction;\n\n    this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<Feature>|undefined} Features.\n   */\n  readDocumentOrFolder_(node, objectStack) {\n    // FIXME use scope somehow\n    const parsersNS = makeStructureNS(NAMESPACE_URIS, {\n      'Document': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Placemark': makeArrayPusher(this.readPlacemark_, this),\n      'Style': this.readSharedStyle_.bind(this),\n      'StyleMap': this.readSharedStyleMap_.bind(this),\n    });\n    /** @type {Array<Feature>} */\n    // @ts-ignore\n    const features = pushParseAndPop([], parsersNS, node, objectStack, this);\n    if (features) {\n      return features;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Feature|undefined} Feature.\n   */\n  readPlacemark_(node, objectStack) {\n    const object = pushParseAndPop(\n      {'geometry': null},\n      PLACEMARK_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (!object) {\n      return undefined;\n    }\n    const feature = new Feature();\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      feature.setId(id);\n    }\n    const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n      objectStack[0]\n    );\n\n    const geometry = object['geometry'];\n    if (geometry) {\n      transformGeometryWithOptions(geometry, false, options);\n    }\n    feature.setGeometry(geometry);\n    delete object['geometry'];\n\n    if (this.extractStyles_) {\n      const style = object['Style'];\n      const styleUrl = object['styleUrl'];\n      const styleFunction = createFeatureStyleFunction(\n        style,\n        styleUrl,\n        this.defaultStyle_,\n        this.sharedStyles_,\n        this.showPointNames_\n      );\n      feature.setStyle(styleFunction);\n    }\n    delete object['Style'];\n    // we do not remove the styleUrl property from the object, so it\n    // gets stored on feature when setProperties is called\n\n    feature.setProperties(object, true);\n\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyle_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      const style = readStyle.call(this, node, objectStack);\n      if (style) {\n        let styleUri;\n        let baseURI = node.baseURI;\n        if (!baseURI || baseURI == 'about:blank') {\n          baseURI = window.location.href;\n        }\n        if (baseURI) {\n          const url = new URL('#' + id, baseURI);\n          styleUri = url.href;\n        } else {\n          styleUri = '#' + id;\n        }\n        this.sharedStyles_[styleUri] = style;\n      }\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyleMap_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id === null) {\n      return;\n    }\n    const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n    if (!styleMapValue) {\n      return;\n    }\n    let styleUri;\n    let baseURI = node.baseURI;\n    if (!baseURI || baseURI == 'about:blank') {\n      baseURI = window.location.href;\n    }\n    if (baseURI) {\n      const url = new URL('#' + id, baseURI);\n      styleUri = url.href;\n    } else {\n      styleUri = '#' + id;\n    }\n    this.sharedStyles_[styleUri] = styleMapValue;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const feature = this.readPlacemark_(node, [\n      this.getReadOptions(node, options),\n    ]);\n    if (feature) {\n      return feature;\n    }\n    return null;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    let features;\n    const localName = node.localName;\n    if (localName == 'Document' || localName == 'Folder') {\n      features = this.readDocumentOrFolder_(node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (features) {\n        return features;\n      }\n      return [];\n    } else if (localName == 'Placemark') {\n      const feature = this.readPlacemark_(node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (feature) {\n        return [feature];\n      }\n      return [];\n    } else if (localName == 'kml') {\n      features = [];\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        const fs = this.readFeaturesFromNode(n, options);\n        if (fs) {\n          extend(features, fs);\n        }\n      }\n      return features;\n    }\n    return [];\n  }\n\n  /**\n   * Read the name of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {string|undefined} Name.\n   * @api\n   */\n  readName(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readNameFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readNameFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readNameFromNode(/** @type {Element} */ (source));\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {string|undefined} Name.\n   */\n  readNameFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        const name = this.readNameFromNode(/** @type {Element} */ (n));\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {string|undefined} Name.\n   */\n  readNameFromNode(node) {\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {\n        return readString(n);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' ||\n          localName == 'Folder' ||\n          localName == 'Placemark' ||\n          localName == 'kml')\n      ) {\n        const name = this.readNameFromNode(n);\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Read the network links of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Network links.\n   * @api\n   */\n  readNetworkLinks(source) {\n    const networkLinks = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(networkLinks, this.readNetworkLinksFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(\n        networkLinks,\n        this.readNetworkLinksFromDocument(/** @type {Document} */ (source))\n      );\n    } else {\n      extend(\n        networkLinks,\n        this.readNetworkLinksFromNode(/** @type {Element} */ (source))\n      );\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromDocument(doc) {\n    const networkLinks = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(\n          networkLinks,\n          this.readNetworkLinksFromNode(/** @type {Element} */ (n))\n        );\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromNode(node) {\n    const networkLinks = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        n.localName == 'NetworkLink'\n      ) {\n        const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);\n        networkLinks.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\n      ) {\n        extend(networkLinks, this.readNetworkLinksFromNode(n));\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * Read the regions of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Regions.\n   * @api\n   */\n  readRegion(source) {\n    const regions = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(regions, this.readRegionFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(\n        regions,\n        this.readRegionFromDocument(/** @type {Document} */ (source))\n      );\n    } else {\n      extend(regions, this.readRegionFromNode(/** @type {Element} */ (source)));\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Region.\n   */\n  readRegionFromDocument(doc) {\n    const regions = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(regions, this.readRegionFromNode(/** @type {Element} */ (n)));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Region.\n   * @api\n   */\n  readRegionFromNode(node) {\n    const regions = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {\n        const obj = pushParseAndPop({}, REGION_PARSERS, n, []);\n        regions.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\n      ) {\n        extend(regions, this.readRegionFromNode(n));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * Encode an array of features in the KML format as an XML node. GeometryCollections,\n   * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const kml = createElementNS(NAMESPACE_URIS[4], 'kml');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);\n    kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    kml.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATION\n    );\n\n    const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {\n        node: kml,\n      };\n    /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */\n    const properties = {};\n    if (features.length > 1) {\n      properties['Document'] = features;\n    } else if (features.length == 1) {\n      properties['Placemark'] = features[0];\n    }\n    const orderedKeys = KML_SEQUENCE[kml.namespaceURI];\n    const values = makeSequence(properties, orderedKeys);\n    pushSerializeAndPop(\n      context,\n      KML_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      [options],\n      orderedKeys,\n      this\n    );\n    return kml;\n  }\n}\n\n/**\n * @param {Style|undefined} foundStyle Style.\n * @param {string} name Name.\n * @return {Style} style Style.\n */\nfunction createNameStyleFunction(foundStyle, name) {\n  const textOffset = [0, 0];\n  /** @type {CanvasTextAlign} */\n  let textAlign = 'start';\n  const imageStyle = foundStyle.getImage();\n  if (imageStyle) {\n    const imageSize = imageStyle.getSize();\n    if (imageSize && imageSize.length == 2) {\n      const imageScale = imageStyle.getScaleArray();\n      const anchor = imageStyle.getAnchor();\n      // Offset the label to be centered to the right of the icon,\n      // if there is one.\n      textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);\n      textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);\n      textAlign = 'left';\n    }\n  }\n  let textStyle = foundStyle.getText();\n  if (textStyle) {\n    // clone the text style, customizing it with name, alignments and offset.\n    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\n    textStyle = textStyle.clone();\n    textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());\n    textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());\n    textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());\n    textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\n  } else {\n    textStyle = DEFAULT_TEXT_STYLE.clone();\n  }\n  textStyle.setText(name);\n  textStyle.setOffsetX(textOffset[0]);\n  textStyle.setOffsetY(textOffset[1]);\n  textStyle.setTextAlign(textAlign);\n\n  const nameStyle = new Style({\n    image: imageStyle,\n    text: textStyle,\n  });\n  return nameStyle;\n}\n\n/**\n * @param {Array<Style>|undefined} style Style.\n * @param {string} styleUrl Style URL.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.\n * @param {boolean|undefined} showPointNames true to show names for point placemarks.\n * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\n */\nfunction createFeatureStyleFunction(\n  style,\n  styleUrl,\n  defaultStyle,\n  sharedStyles,\n  showPointNames\n) {\n  return (\n    /**\n     * @param {Feature} feature feature.\n     * @param {number} resolution Resolution.\n     * @return {Array<Style>|Style} Style.\n     */\n    function (feature, resolution) {\n      let drawName = showPointNames;\n      let name = '';\n      let multiGeometryPoints = [];\n      if (drawName) {\n        const geometry = feature.getGeometry();\n        if (geometry) {\n          if (geometry instanceof GeometryCollection) {\n            multiGeometryPoints = geometry\n              .getGeometriesArrayRecursive()\n              .filter(function (geometry) {\n                const type = geometry.getType();\n                return type === 'Point' || type === 'MultiPoint';\n              });\n            drawName = multiGeometryPoints.length > 0;\n          } else {\n            const type = geometry.getType();\n            drawName = type === 'Point' || type === 'MultiPoint';\n          }\n        }\n      }\n\n      if (drawName) {\n        name = /** @type {string} */ (feature.get('name'));\n        drawName = drawName && !!name;\n        // convert any html character codes\n        if (drawName && /&[^&]+;/.test(name)) {\n          if (!TEXTAREA) {\n            TEXTAREA = document.createElement('textarea');\n          }\n          TEXTAREA.innerHTML = name;\n          name = TEXTAREA.value;\n        }\n      }\n\n      let featureStyle = defaultStyle;\n      if (style) {\n        featureStyle = style;\n      } else if (styleUrl) {\n        featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\n      }\n      if (drawName) {\n        const nameStyle = createNameStyleFunction(featureStyle[0], name);\n        if (multiGeometryPoints.length > 0) {\n          // in multigeometries restrict the name style to points and create a\n          // style without image or text for geometries requiring fill or stroke\n          // including any polygon specific style if there is one\n          nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));\n          const baseStyle = new Style({\n            geometry: featureStyle[0].getGeometry(),\n            image: null,\n            fill: featureStyle[0].getFill(),\n            stroke: featureStyle[0].getStroke(),\n            text: null,\n          });\n          return [nameStyle, baseStyle].concat(featureStyle.slice(1));\n        }\n        return nameStyle;\n      }\n      return featureStyle;\n    }\n  );\n}\n\n/**\n * @param {Array<Style>|string|undefined} styleValue Style value.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles\n * Shared styles.\n * @return {Array<Style>} Style.\n */\nfunction findStyle(styleValue, defaultStyle, sharedStyles) {\n  if (Array.isArray(styleValue)) {\n    return styleValue;\n  } else if (typeof styleValue === 'string') {\n    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\n  }\n  return defaultStyle;\n}\n\n/**\n * @param {Node} node Node.\n * @return {import(\"../color.js\").Color|undefined} Color.\n */\nfunction readColor(node) {\n  const s = getAllTextContent(node, false);\n  // The KML specification states that colors should not include a leading `#`\n  // but we tolerate them.\n  const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\n  if (m) {\n    const hexColor = m[1];\n    return [\n      parseInt(hexColor.substr(6, 2), 16),\n      parseInt(hexColor.substr(4, 2), 16),\n      parseInt(hexColor.substr(2, 2), 16),\n      parseInt(hexColor.substr(0, 2), 16) / 255,\n    ];\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {Array<number>|undefined} Flat coordinates.\n */\nexport function readFlatCoordinates(node) {\n  let s = getAllTextContent(node, false);\n  const flatCoordinates = [];\n  // The KML specification states that coordinate tuples should not include\n  // spaces, but we tolerate them.\n  s = s.replace(/\\s*,\\s*/g, ',');\n  const re =\n    /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?),([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|,|$)(?:([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|$))?\\s*/i;\n  let m;\n  while ((m = re.exec(s))) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = m[3] ? parseFloat(m[3]) : 0;\n    flatCoordinates.push(x, y, z);\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  return flatCoordinates;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readURI(node) {\n  const s = getAllTextContent(node, false).trim();\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readStyleURL(node) {\n  // KML files in the wild occasionally forget the leading\n  // `#` on styleUrlsdefined in the same document.\n  const s = getAllTextContent(node, false)\n    .trim()\n    .replace(/^(?!.*#)/, '#');\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Element} node Node.\n * @return {Vec2} Vec2.\n */\nfunction readVec2(node) {\n  const xunits = node.getAttribute('xunits');\n  const yunits = node.getAttribute('yunits');\n  /** @type {import('../style/Icon.js').IconOrigin} */\n  let origin;\n  if (xunits !== 'insetPixels') {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-left';\n    } else {\n      origin = 'top-left';\n    }\n  } else {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-right';\n    } else {\n      origin = 'top-right';\n    }\n  }\n  return {\n    x: parseFloat(node.getAttribute('x')),\n    xunits: ICON_ANCHOR_UNITS_MAP[xunits],\n    y: parseFloat(node.getAttribute('y')),\n    yunits: ICON_ANCHOR_UNITS_MAP[yunits],\n    origin: origin,\n  };\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Scale.\n */\nfunction readScale(node) {\n  return readDecimal(node);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Pair': pairDataParser,\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>|string|undefined} StyleMap.\n */\nfunction readStyleMapValue(node, objectStack) {\n  return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeObjectPropertySetter(readIcon),\n  'color': makeObjectPropertySetter(readColor),\n  'heading': makeObjectPropertySetter(readDecimal),\n  'hotSpot': makeObjectPropertySetter(readVec2),\n  'scale': makeObjectPropertySetter(readScale),\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction iconStyleParser(node, objectStack) {\n  // FIXME refreshMode\n  // FIXME refreshInterval\n  // FIXME viewRefreshTime\n  // FIXME viewBoundScale\n  // FIXME viewFormat\n  // FIXME httpQuery\n  const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  const IconObject = 'Icon' in object ? object['Icon'] : {};\n  const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;\n  let src;\n  const href = /** @type {string|undefined} */ (IconObject['href']);\n  if (href) {\n    src = href;\n  } else if (drawIcon) {\n    src = DEFAULT_IMAGE_STYLE_SRC;\n  }\n  let anchor, anchorXUnits, anchorYUnits;\n  /** @type {import('../style/Icon.js').IconOrigin|undefined} */\n  let anchorOrigin = 'bottom-left';\n  const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);\n  if (hotSpot) {\n    anchor = [hotSpot.x, hotSpot.y];\n    anchorXUnits = hotSpot.xunits;\n    anchorYUnits = hotSpot.yunits;\n    anchorOrigin = hotSpot.origin;\n  } else if (/^https?:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\n    // Google hotspots from https://kml4earth.appspot.com/icons.html#notes\n    if (src.includes('pushpin')) {\n      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('arrow-reverse')) {\n      anchor = [54, 42];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('paddle')) {\n      anchor = [32, 1];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    }\n  }\n\n  let offset;\n  const x = /** @type {number|undefined} */ (IconObject['x']);\n  const y = /** @type {number|undefined} */ (IconObject['y']);\n  if (x !== undefined && y !== undefined) {\n    offset = [x, y];\n  }\n\n  let size;\n  const w = /** @type {number|undefined} */ (IconObject['w']);\n  const h = /** @type {number|undefined} */ (IconObject['h']);\n  if (w !== undefined && h !== undefined) {\n    size = [w, h];\n  }\n\n  let rotation;\n  const heading = /** @type {number} */ (object['heading']);\n  if (heading !== undefined) {\n    rotation = toRadians(heading);\n  }\n\n  const scale = /** @type {number|undefined} */ (object['scale']);\n\n  const color = /** @type {Array<number>|undefined} */ (object['color']);\n\n  if (drawIcon) {\n    if (src == DEFAULT_IMAGE_STYLE_SRC) {\n      size = DEFAULT_IMAGE_STYLE_SIZE;\n    }\n\n    const imageStyle = new Icon({\n      anchor: anchor,\n      anchorOrigin: anchorOrigin,\n      anchorXUnits: anchorXUnits,\n      anchorYUnits: anchorYUnits,\n      crossOrigin: this.crossOrigin_,\n      offset: offset,\n      offsetOrigin: 'bottom-left',\n      rotation: rotation,\n      scale: scale,\n      size: size,\n      src: this.iconUrlFunction_(src),\n      color: color,\n    });\n\n    const imageScale = imageStyle.getScaleArray()[0];\n    const imageSize = imageStyle.getSize();\n    if (imageSize === null) {\n      const imageState = imageStyle.getImageState();\n      if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {\n        const listener = function () {\n          const imageState = imageStyle.getImageState();\n          if (\n            !(\n              imageState === ImageState.IDLE ||\n              imageState === ImageState.LOADING\n            )\n          ) {\n            const imageSize = imageStyle.getSize();\n            if (imageSize && imageSize.length == 2) {\n              const resizeScale = scaleForSize(imageSize);\n              imageStyle.setScale(imageScale * resizeScale);\n            }\n            imageStyle.unlistenImageChange(listener);\n          }\n        };\n        imageStyle.listenImageChange(listener);\n        if (imageState === ImageState.IDLE) {\n          imageStyle.load();\n        }\n      }\n    } else if (imageSize.length == 2) {\n      const resizeScale = scaleForSize(imageSize);\n      imageStyle.setScale(imageScale * resizeScale);\n    }\n    styleObject['imageStyle'] = imageStyle;\n  } else {\n    // handle the case when we explicitly want to draw no icon.\n    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'scale': makeObjectPropertySetter(readScale),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction labelStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const textStyle = new Text({\n    fill: new Fill({\n      color:\n        /** @type {import(\"../color.js\").Color} */\n        ('color' in object ? object['color'] : DEFAULT_COLOR),\n    }),\n    scale: /** @type {number|undefined} */ (object['scale']),\n  });\n  styleObject['textStyle'] = textStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'width': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lineStyleParser(node, objectStack) {\n  // FIXME colorMode\n  // FIXME gx:outerColor\n  // FIXME gx:outerWidth\n  // FIXME gx:physicalWidth\n  // FIXME gx:labelVisibility\n  const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const strokeStyle = new Stroke({\n    color:\n      /** @type {import(\"../color.js\").Color} */\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\n    width: /** @type {number} */ ('width' in object ? object['width'] : 1),\n  });\n  styleObject['strokeStyle'] = strokeStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'fill': makeObjectPropertySetter(readBoolean),\n  'outline': makeObjectPropertySetter(readBoolean),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction polyStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const fillStyle = new Fill({\n    color:\n      /** @type {import(\"../color.js\").Color} */\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\n  });\n  styleObject['fillStyle'] = fillStyle;\n  const fill = /** @type {boolean|undefined} */ (object['fill']);\n  if (fill !== undefined) {\n    styleObject['fill'] = fill;\n  }\n  const outline = /** @type {boolean|undefined} */ (object['outline']);\n  if (outline !== undefined) {\n    styleObject['outline'] = outline;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} LinearRing flat coordinates.\n */\nfunction readFlatLinearRing(node, objectStack) {\n  return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction gxCoordParser(node, objectStack) {\n  const gxTrackObject =\n    /** @type {GxTrackObject} */\n    (objectStack[objectStack.length - 1]);\n  const coordinates = gxTrackObject.coordinates;\n  const s = getAllTextContent(node, false);\n  const re =\n    /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\n  const m = re.exec(s);\n  if (m) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = parseFloat(m[3]);\n    coordinates.push([x, y, z]);\n  } else {\n    coordinates.push([]);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {\n  'Track': makeArrayPusher(readGxTrack),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {MultiLineString|undefined} MultiLineString.\n */\nfunction readGxMultiTrack(node, objectStack) {\n  const lineStrings = pushParseAndPop(\n    [],\n    GX_MULTITRACK_GEOMETRY_PARSERS,\n    node,\n    objectStack\n  );\n  if (!lineStrings) {\n    return undefined;\n  }\n  return new MultiLineString(lineStrings);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_TRACK_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'when': whenParser,\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'coord': gxCoordParser,\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readGxTrack(node, objectStack) {\n  const gxTrackObject = pushParseAndPop(\n    /** @type {GxTrackObject} */ ({\n      coordinates: [],\n      whens: [],\n    }),\n    GX_TRACK_PARSERS,\n    node,\n    objectStack\n  );\n  if (!gxTrackObject) {\n    return undefined;\n  }\n  const flatCoordinates = [];\n  const coordinates = gxTrackObject.coordinates;\n  const whens = gxTrackObject.whens;\n  for (\n    let i = 0, ii = Math.min(coordinates.length, whens.length);\n    i < ii;\n    ++i\n  ) {\n    if (coordinates[i].length == 3) {\n      flatCoordinates.push(\n        coordinates[i][0],\n        coordinates[i][1],\n        coordinates[i][2],\n        whens[i]\n      );\n    }\n  }\n  return new LineString(flatCoordinates, 'XYZM');\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'href': makeObjectPropertySetter(readURI),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'x': makeObjectPropertySetter(readDecimal),\n    'y': makeObjectPropertySetter(readDecimal),\n    'w': makeObjectPropertySetter(readDecimal),\n    'h': makeObjectPropertySetter(readDecimal),\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object} Icon object.\n */\nfunction readIcon(node, objectStack) {\n  const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);\n  if (iconObject) {\n    return iconObject;\n  }\n  return null;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} Flat coordinates.\n */\nfunction readFlatCoordinatesFromNode(node, objectStack) {\n  return pushParseAndPop(\n    null,\n    GEOMETRY_FLAT_COORDINATES_PARSERS,\n    node,\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeObjectPropertySetter(readBoolean),\n  'tessellate': makeObjectPropertySetter(readBoolean),\n  'altitudeMode': makeObjectPropertySetter(readString),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readLineString(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(flatCoordinates, 'XYZ');\n    lineString.setProperties(properties, true);\n    return lineString;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readLinearRing(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const polygon = new Polygon(flatCoordinates, 'XYZ', [\n      flatCoordinates.length,\n    ]);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeArrayPusher(readLineString),\n  'LinearRing': makeArrayPusher(readLinearRing),\n  'MultiGeometry': makeArrayPusher(readMultiGeometry),\n  'Point': makeArrayPusher(readPoint),\n  'Polygon': makeArrayPusher(readPolygon),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readMultiGeometry(node, objectStack) {\n  const geometries = pushParseAndPop(\n    [],\n    MULTI_GEOMETRY_PARSERS,\n    node,\n    objectStack\n  );\n  if (!geometries) {\n    return null;\n  }\n  if (geometries.length === 0) {\n    return new GeometryCollection(geometries);\n  }\n  let multiGeometry;\n  let homogeneous = true;\n  const type = geometries[0].getType();\n  let geometry;\n  for (let i = 1, ii = geometries.length; i < ii; ++i) {\n    geometry = geometries[i];\n    if (geometry.getType() != type) {\n      homogeneous = false;\n      break;\n    }\n  }\n  if (homogeneous) {\n    let layout;\n    let flatCoordinates;\n    if (type == 'Point') {\n      const point = geometries[0];\n      layout = point.getLayout();\n      flatCoordinates = point.getFlatCoordinates();\n      for (let i = 1, ii = geometries.length; i < ii; ++i) {\n        geometry = geometries[i];\n        extend(flatCoordinates, geometry.getFlatCoordinates());\n      }\n      multiGeometry = new MultiPoint(flatCoordinates, layout);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'LineString') {\n      multiGeometry = new MultiLineString(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'Polygon') {\n      multiGeometry = new MultiPolygon(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'GeometryCollection') {\n      multiGeometry = new GeometryCollection(geometries);\n    } else {\n      assert(false, 37); // Unknown geometry type found\n    }\n  } else {\n    multiGeometry = new GeometryCollection(geometries);\n  }\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (multiGeometry);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Point|undefined} Point.\n */\nfunction readPoint(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(flatCoordinates, 'XYZ');\n    point.setProperties(properties, true);\n    return point;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'innerBoundaryIs': innerBoundaryIsParser,\n  'outerBoundaryIs': outerBoundaryIsParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readPolygon(node, objectStack) {\n  const properties = pushParseAndPop(\n    /** @type {Object<string,*>} */ ({}),\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatLinearRings = pushParseAndPop(\n    [null],\n    FLAT_LINEAR_RINGS_PARSERS,\n    node,\n    objectStack\n  );\n  if (flatLinearRings && flatLinearRings[0]) {\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    const polygon = new Polygon(flatCoordinates, 'XYZ', ends);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': iconStyleParser,\n  'LabelStyle': labelStyleParser,\n  'LineStyle': lineStyleParser,\n  'PolyStyle': polyStyleParser,\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>} Style.\n */\nfunction readStyle(node, objectStack) {\n  const styleObject = pushParseAndPop(\n    {},\n    STYLE_PARSERS,\n    node,\n    objectStack,\n    this\n  );\n  if (!styleObject) {\n    return null;\n  }\n  let fillStyle =\n    /** @type {Fill} */\n    (\n      'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE\n    );\n  const fill = /** @type {boolean|undefined} */ (styleObject['fill']);\n  if (fill !== undefined && !fill) {\n    fillStyle = null;\n  }\n  let imageStyle;\n  if ('imageStyle' in styleObject) {\n    if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\n      imageStyle = /** @type {import(\"../style/Image.js\").default} */ (\n        styleObject['imageStyle']\n      );\n    }\n  } else {\n    imageStyle = DEFAULT_IMAGE_STYLE;\n  }\n  const textStyle =\n    /** @type {Text} */\n    (\n      'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE\n    );\n  const strokeStyle =\n    /** @type {Stroke} */\n    (\n      'strokeStyle' in styleObject\n        ? styleObject['strokeStyle']\n        : DEFAULT_STROKE_STYLE\n    );\n  const outline = /** @type {boolean|undefined} */ (styleObject['outline']);\n  if (outline !== undefined && !outline) {\n    // if the polystyle specifies no outline two styles are needed,\n    // one for non-polygon geometries where linestrings require a stroke\n    // and one for polygons where there should be no stroke\n    return [\n      new Style({\n        geometry: function (feature) {\n          const geometry = feature.getGeometry();\n          const type = geometry.getType();\n          if (type === 'GeometryCollection') {\n            const collection =\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\n                geometry\n              );\n            return new GeometryCollection(\n              collection\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type !== 'Polygon' && type !== 'MultiPolygon';\n                })\n            );\n          } else if (type !== 'Polygon' && type !== 'MultiPolygon') {\n            return geometry;\n          }\n        },\n        fill: fillStyle,\n        image: imageStyle,\n        stroke: strokeStyle,\n        text: textStyle,\n        zIndex: undefined, // FIXME\n      }),\n      new Style({\n        geometry: function (feature) {\n          const geometry = feature.getGeometry();\n          const type = geometry.getType();\n          if (type === 'GeometryCollection') {\n            const collection =\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\n                geometry\n              );\n            return new GeometryCollection(\n              collection\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'Polygon' || type === 'MultiPolygon';\n                })\n            );\n          } else if (type === 'Polygon' || type === 'MultiPolygon') {\n            return geometry;\n          }\n        },\n        fill: fillStyle,\n        stroke: null,\n        zIndex: undefined, // FIXME\n      }),\n    ];\n  }\n  return [\n    new Style({\n      fill: fillStyle,\n      image: imageStyle,\n      stroke: strokeStyle,\n      text: textStyle,\n      zIndex: undefined, // FIXME\n    }),\n  ];\n}\n\n/**\n * Reads an array of geometries and creates arrays for common geometry\n * properties. Then sets them to the multi geometry.\n * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.\n * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\n */\nfunction setCommonGeometryProperties(multiGeometry, geometries) {\n  const ii = geometries.length;\n  const extrudes = new Array(geometries.length);\n  const tessellates = new Array(geometries.length);\n  const altitudeModes = new Array(geometries.length);\n  let hasExtrude, hasTessellate, hasAltitudeMode;\n  hasExtrude = false;\n  hasTessellate = false;\n  hasAltitudeMode = false;\n  for (let i = 0; i < ii; ++i) {\n    const geometry = geometries[i];\n    extrudes[i] = geometry.get('extrude');\n    tessellates[i] = geometry.get('tessellate');\n    altitudeModes[i] = geometry.get('altitudeMode');\n    hasExtrude = hasExtrude || extrudes[i] !== undefined;\n    hasTessellate = hasTessellate || tessellates[i] !== undefined;\n    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\n  }\n  if (hasExtrude) {\n    multiGeometry.set('extrude', extrudes);\n  }\n  if (hasTessellate) {\n    multiGeometry.set('tessellate', tessellates);\n  }\n  if (hasAltitudeMode) {\n    multiGeometry.set('altitudeMode', altitudeModes);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'displayName': makeObjectPropertySetter(readString),\n  'value': makeObjectPropertySetter(readString),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction dataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  parseNode(DATA_PARSERS, node, objectStack);\n  const featureObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  if (name && featureObject.displayName) {\n    featureObject[name] = {\n      value: featureObject.value,\n      displayName: featureObject.displayName,\n      toString: function () {\n        return featureObject.value;\n      },\n    };\n  } else if (name !== null) {\n    featureObject[name] = featureObject.value;\n  } else if (featureObject.displayName !== null) {\n    featureObject[featureObject.displayName] = featureObject.value;\n  }\n  delete featureObject['value'];\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': dataParser,\n  'SchemaData': schemaDataParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction extendedDataParser(node, objectStack) {\n  parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction regionParser(node, objectStack) {\n  parseNode(REGION_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Style': makeObjectPropertySetter(readStyle),\n  'key': makeObjectPropertySetter(readString),\n  'styleUrl': makeObjectPropertySetter(readStyleURL),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction pairDataParser(node, objectStack) {\n  const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);\n  if (!pairObject) {\n    return;\n  }\n  const key = /** @type {string|undefined} */ (pairObject['key']);\n  if (key && key == 'normal') {\n    const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);\n    if (styleUrl) {\n      objectStack[objectStack.length - 1] = styleUrl;\n    }\n    const style = /** @type {Style} */ (pairObject['Style']);\n    if (style) {\n      objectStack[objectStack.length - 1] = style;\n    }\n  }\n}\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction placemarkStyleMapParser(node, objectStack) {\n  const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n  if (!styleMapValue) {\n    return;\n  }\n  const placemarkObject = objectStack[objectStack.length - 1];\n  if (Array.isArray(styleMapValue)) {\n    placemarkObject['Style'] = styleMapValue;\n  } else if (typeof styleMapValue === 'string') {\n    placemarkObject['styleUrl'] = styleMapValue;\n  } else {\n    assert(false, 38); // `styleMapValue` has an unknown type\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'SimpleData': simpleDataParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction schemaDataParser(node, objectStack) {\n  parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction simpleDataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (name !== null) {\n    const data = readString(node);\n    const featureObject = /** @type {Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    featureObject[name] = data;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'altitudeMode': makeObjectPropertySetter(readString),\n  'minAltitude': makeObjectPropertySetter(readDecimal),\n  'maxAltitude': makeObjectPropertySetter(readDecimal),\n  'north': makeObjectPropertySetter(readDecimal),\n  'south': makeObjectPropertySetter(readDecimal),\n  'east': makeObjectPropertySetter(readDecimal),\n  'west': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction latLonAltBoxParser(node, objectStack) {\n  const object = pushParseAndPop(\n    {},\n    LAT_LON_ALT_BOX_PARSERS,\n    node,\n    objectStack\n  );\n  if (!object) {\n    return;\n  }\n  const regionObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  const extent = [\n    parseFloat(object['west']),\n    parseFloat(object['south']),\n    parseFloat(object['east']),\n    parseFloat(object['north']),\n  ];\n  regionObject['extent'] = extent;\n  regionObject['altitudeMode'] = object['altitudeMode'];\n  regionObject['minAltitude'] = parseFloat(object['minAltitude']);\n  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'minLodPixels': makeObjectPropertySetter(readDecimal),\n  'maxLodPixels': makeObjectPropertySetter(readDecimal),\n  'minFadeExtent': makeObjectPropertySetter(readDecimal),\n  'maxFadeExtent': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lodParser(node, objectStack) {\n  const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\n  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\n  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\n  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth\n  // allows multiple, so we parse multiple here too.\n  'LinearRing': makeArrayPusher(readFlatLinearRing),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction innerBoundaryIsParser(node, objectStack) {\n  const innerBoundaryFlatLinearRings = pushParseAndPop(\n    /** @type {Array<Array<number>>} */ ([]),\n    INNER_BOUNDARY_IS_PARSERS,\n    node,\n    objectStack\n  );\n  if (innerBoundaryFlatLinearRings.length > 0) {\n    const flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(...innerBoundaryFlatLinearRings);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeReplacer(readFlatLinearRing),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction outerBoundaryIsParser(node, objectStack) {\n  /** @type {Array<number>|undefined} */\n  const flatLinearRing = pushParseAndPop(\n    undefined,\n    OUTER_BOUNDARY_IS_PARSERS,\n    node,\n    objectStack\n  );\n  if (flatLinearRing) {\n    const flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction linkParser(node, objectStack) {\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction whenParser(node, objectStack) {\n  const gxTrackObject =\n    /** @type {GxTrackObject} */\n    (objectStack[objectStack.length - 1]);\n  const whens = gxTrackObject.whens;\n  const s = getAllTextContent(node, false);\n  const when = Date.parse(s);\n  whens.push(isNaN(when) ? 0 : when);\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the color to.\n * @param {import(\"../color.js\").Color|string} color Color.\n */\nfunction writeColorTextNode(node, color) {\n  const rgba = asArray(color);\n  const opacity = rgba.length == 4 ? rgba[3] : 1;\n  /** @type {Array<string|number>} */\n  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\n  for (let i = 0; i < 4; ++i) {\n    const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);\n    abgr[i] = hex.length == 1 ? '0' + hex : hex;\n  }\n  writeStringTextNode(node, abgr.join(''));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the coordinates to.\n * @param {Array<number>} coordinates Coordinates.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeCoordinatesTextNode(node, coordinates, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n\n  const layout = context['layout'];\n  const stride = context['stride'];\n\n  let dimension;\n  if (layout == 'XY' || layout == 'XYM') {\n    dimension = 2;\n  } else if (layout == 'XYZ' || layout == 'XYZM') {\n    dimension = 3;\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n\n  const ii = coordinates.length;\n  let text = '';\n  if (ii > 0) {\n    text += coordinates[0];\n    for (let d = 1; d < dimension; ++d) {\n      text += ',' + coordinates[d];\n    }\n    for (let i = stride; i < ii; i += stride) {\n      text += ' ' + coordinates[i];\n      for (let d = 1; d < dimension; ++d) {\n        text += ',' + coordinates[i + d];\n      }\n    }\n  }\n  writeStringTextNode(node, text);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': makeChildAppender(writeDataNode),\n  'value': makeChildAppender(writeDataNodeValue),\n  'displayName': makeChildAppender(writeDataNodeName),\n});\n\n/**\n * @param {Element} node Node.\n * @param {{name: *, value: *}} pair Name value pair.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeDataNode(node, pair, objectStack) {\n  node.setAttribute('name', pair.name);\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const value = pair.value;\n\n  if (typeof value == 'object') {\n    if (value !== null && value.displayName) {\n      pushSerializeAndPop(\n        context,\n        EXTENDEDDATA_NODE_SERIALIZERS,\n        OBJECT_PROPERTY_NODE_FACTORY,\n        [value.displayName],\n        objectStack,\n        ['displayName']\n      );\n    }\n\n    if (value !== null && value.value) {\n      pushSerializeAndPop(\n        context,\n        EXTENDEDDATA_NODE_SERIALIZERS,\n        OBJECT_PROPERTY_NODE_FACTORY,\n        [value.value],\n        objectStack,\n        ['value']\n      );\n    }\n  } else {\n    pushSerializeAndPop(\n      context,\n      EXTENDEDDATA_NODE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      [value],\n      objectStack,\n      ['value']\n    );\n  }\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the name to.\n * @param {string} name DisplayName.\n */\nfunction writeDataNodeName(node, name) {\n  writeCDATASection(node, name);\n}\n\n/**\n * @param {Node} node Node to append a CDATA Section with the value to.\n * @param {string} value Value.\n */\nfunction writeDataNodeValue(node, value) {\n  writeStringTextNode(node, value);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Placemark': makeChildAppender(writePlacemark),\n});\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return createElementNS(parentNode.namespaceURI, 'Placemark');\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<Feature>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writeDocument(node, features, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  pushSerializeAndPop(\n    context,\n    DOCUMENT_SERIALIZERS,\n    DOCUMENT_NODE_FACTORY,\n    features,\n    objectStack,\n    undefined,\n    this\n  );\n}\n\n/**\n * A factory for creating Data nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');\n\n/**\n * @param {Element} node Node.\n * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeExtendedData(node, namesAndValues, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const names = namesAndValues.names;\n  const values = namesAndValues.values;\n  const length = names.length;\n\n  for (let i = 0; i < length; i++) {\n    pushSerializeAndPop(\n      context,\n      EXTENDEDDATA_NODE_SERIALIZERS,\n      DATA_NODE_FACTORY,\n      [{name: names[i], value: values[i]}],\n      objectStack\n    );\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_SEQUENCE = makeStructureNS(\n  NAMESPACE_URIS,\n  ['href'],\n  makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h'])\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_SERIALIZERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'href': makeChildAppender(writeStringTextNode),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'x': makeChildAppender(writeDecimalTextNode),\n    'y': makeChildAppender(writeDecimalTextNode),\n    'w': makeChildAppender(writeDecimalTextNode),\n    'h': makeChildAppender(writeDecimalTextNode),\n  })\n);\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GX_NODE_FACTORY = function (value, objectStack, nodeName) {\n  return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);\n};\n\n/**\n * @param {Element} node Node.\n * @param {Object} icon Icon object.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIcon(node, icon, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const parentNode = objectStack[objectStack.length - 1].node;\n  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\n  let values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n  orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\n  values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_SERIALIZERS,\n    GX_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'scale',\n  'heading',\n  'Icon',\n  'color',\n  'hotSpot',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeChildAppender(writeIcon),\n  'color': makeChildAppender(writeColorTextNode),\n  'heading': makeChildAppender(writeDecimalTextNode),\n  'hotSpot': makeChildAppender(writeVec2),\n  'scale': makeChildAppender(writeScaleTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../style/Icon.js\").default} style Icon style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIconStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const /** @type {Object<string, any>} */ properties = {};\n  const src = style.getSrc();\n  const size = style.getSize();\n  const iconImageSize = style.getImageSize();\n  const iconProperties = {\n    'href': src,\n  };\n\n  if (size) {\n    iconProperties['w'] = size[0];\n    iconProperties['h'] = size[1];\n    const anchor = style.getAnchor(); // top-left\n    const origin = style.getOrigin(); // top-left\n\n    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\n      iconProperties['x'] = origin[0];\n      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\n    }\n\n    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\n      const /** @type {Vec2} */ hotSpot = {\n          x: anchor[0],\n          xunits: 'pixels',\n          y: size[1] - anchor[1],\n          yunits: 'pixels',\n        };\n      properties['hotSpot'] = hotSpot;\n    }\n  }\n\n  properties['Icon'] = iconProperties;\n\n  let scale = style.getScaleArray()[0];\n  let imageSize = size;\n  if (imageSize === null) {\n    imageSize = DEFAULT_IMAGE_STYLE_SIZE;\n  }\n  if (imageSize.length == 2) {\n    const resizeScale = scaleForSize(imageSize);\n    scale = scale / resizeScale;\n  }\n  if (scale !== 1) {\n    properties['scale'] = scale;\n  }\n\n  const rotation = style.getRotation();\n  if (rotation !== 0) {\n    properties['heading'] = rotation; // 0-360\n  }\n\n  const color = style.getColor();\n  if (color) {\n    properties['color'] = color;\n  }\n\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'color',\n  'scale',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'scale': makeChildAppender(writeScaleTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Text} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLabelStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {};\n  const fill = style.getFill();\n  if (fill) {\n    properties['color'] = fill.getColor();\n  }\n  const scale = style.getScale();\n  if (scale && scale !== 1) {\n    properties['scale'] = scale;\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    LABEL_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'width': makeChildAppender(writeDecimalTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Stroke} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLineStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {\n    'color': style.getColor(),\n    'width': Number(style.getWidth()) || 1,\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    LINE_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'Point',\n  'LineString': 'LineString',\n  'LinearRing': 'LinearRing',\n  'Polygon': 'Polygon',\n  'MultiPoint': 'MultiGeometry',\n  'MultiLineString': 'MultiGeometry',\n  'MultiPolygon': 'MultiGeometry',\n  'GeometryCollection': 'MultiGeometry',\n};\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {\n  if (value) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      parentNode.namespaceURI,\n      GEOMETRY_TYPE_TO_NODENAME[\n        /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType()\n      ]\n    );\n  }\n};\n\n/**\n * A factory for creating Point nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');\n\n/**\n * A factory for creating LineString nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');\n\n/**\n * A factory for creating LinearRing nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');\n\n/**\n * A factory for creating Polygon nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'GeometryCollection': makeChildAppender(writeMultiGeometry),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeMultiGeometry(node, geometry, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  const type = geometry.getType();\n  /** @type {Array<import(\"../geom/Geometry.js\").default>} */\n  let geometries = [];\n  /** @type {function(*, Array<*>, string=): (Node|undefined)} */\n  let factory;\n  if (type === 'GeometryCollection') {\n    /** @type {GeometryCollection} */ (geometry)\n      .getGeometriesArrayRecursive()\n      .forEach(function (geometry) {\n        const type = geometry.getType();\n        if (type === 'MultiPoint') {\n          geometries = geometries.concat(\n            /** @type {MultiPoint} */ (geometry).getPoints()\n          );\n        } else if (type === 'MultiLineString') {\n          geometries = geometries.concat(\n            /** @type {MultiLineString} */ (geometry).getLineStrings()\n          );\n        } else if (type === 'MultiPolygon') {\n          geometries = geometries.concat(\n            /** @type {MultiPolygon} */ (geometry).getPolygons()\n          );\n        } else if (\n          type === 'Point' ||\n          type === 'LineString' ||\n          type === 'Polygon'\n        ) {\n          geometries.push(geometry);\n        } else {\n          assert(false, 39); // Unknown geometry type\n        }\n      });\n    factory = GEOMETRY_NODE_FACTORY;\n  } else if (type === 'MultiPoint') {\n    geometries = /** @type {MultiPoint} */ (geometry).getPoints();\n    factory = POINT_NODE_FACTORY;\n  } else if (type === 'MultiLineString') {\n    geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();\n    factory = LINE_STRING_NODE_FACTORY;\n  } else if (type === 'MultiPolygon') {\n    geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();\n    factory = POLYGON_NODE_FACTORY;\n  } else {\n    assert(false, 39); // Unknown geometry type\n  }\n  pushSerializeAndPop(\n    context,\n    MULTI_GEOMETRY_SERIALIZERS,\n    factory,\n    geometries,\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeBoundaryIs(node, linearRing, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  pushSerializeAndPop(\n    context,\n    BOUNDARY_IS_SERIALIZERS,\n    LINEAR_RING_NODE_FACTORY,\n    [linearRing],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': makeChildAppender(writeExtendedData),\n  'MultiGeometry': makeChildAppender(writeMultiGeometry),\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'Style': makeChildAppender(writeStyle),\n  'address': makeChildAppender(writeStringTextNode),\n  'description': makeChildAppender(writeStringTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'open': makeChildAppender(writeBooleanTextNode),\n  'phoneNumber': makeChildAppender(writeStringTextNode),\n  'styleUrl': makeChildAppender(writeStringTextNode),\n  'visibility': makeChildAppender(writeBooleanTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'open',\n  'visibility',\n  'address',\n  'phoneNumber',\n  'description',\n  'styleUrl',\n  'Style',\n]);\n\n/**\n * A factory for creating ExtendedData nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');\n\n/**\n * FIXME currently we do serialize arbitrary/custom feature properties\n * (ExtendedData).\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writePlacemark(node, feature, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n\n  // set id\n  if (feature.getId()) {\n    node.setAttribute('id', /** @type {string} */ (feature.getId()));\n  }\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = feature.getProperties();\n\n  // don't export these to ExtendedData\n  const filter = {\n    'address': 1,\n    'description': 1,\n    'name': 1,\n    'open': 1,\n    'phoneNumber': 1,\n    'styleUrl': 1,\n    'visibility': 1,\n  };\n  filter[feature.getGeometryName()] = 1;\n  const keys = Object.keys(properties || {})\n    .sort()\n    .filter(function (v) {\n      return !filter[v];\n    });\n\n  const styleFunction = feature.getStyleFunction();\n  if (styleFunction) {\n    // FIXME the styles returned by the style function are supposed to be\n    // resolution-independent here\n    const styles = styleFunction(feature, 0);\n    if (styles) {\n      const styleArray = Array.isArray(styles) ? styles : [styles];\n      let pointStyles = styleArray;\n      if (feature.getGeometry()) {\n        pointStyles = styleArray.filter(function (style) {\n          const geometry = style.getGeometryFunction()(feature);\n          if (geometry) {\n            const type = geometry.getType();\n            if (type === 'GeometryCollection') {\n              return /** @type {GeometryCollection} */ (geometry)\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'Point' || type === 'MultiPoint';\n                }).length;\n            }\n            return type === 'Point' || type === 'MultiPoint';\n          }\n        });\n        ('Point');\n      }\n      if (this.writeStyles_) {\n        let lineStyles = styleArray;\n        let polyStyles = styleArray;\n        if (feature.getGeometry()) {\n          lineStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */ (geometry)\n                  .getGeometriesArrayRecursive()\n                  .filter(function (geometry) {\n                    const type = geometry.getType();\n                    return type === 'LineString' || type === 'MultiLineString';\n                  }).length;\n              }\n              return type === 'LineString' || type === 'MultiLineString';\n            }\n          });\n          polyStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */ (geometry)\n                  .getGeometriesArrayRecursive()\n                  .filter(function (geometry) {\n                    const type = geometry.getType();\n                    return type === 'Polygon' || type === 'MultiPolygon';\n                  }).length;\n              }\n              return type === 'Polygon' || type === 'MultiPolygon';\n            }\n          });\n        }\n        properties['Style'] = {\n          pointStyles: pointStyles,\n          lineStyles: lineStyles,\n          polyStyles: polyStyles,\n        };\n      }\n      if (pointStyles.length && properties['name'] === undefined) {\n        const textStyle = pointStyles[0].getText();\n        if (textStyle) {\n          properties['name'] = textStyle.getText();\n        }\n      }\n    }\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    PLACEMARK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n\n  if (keys.length > 0) {\n    const sequence = makeSequence(properties, keys);\n    const namesAndValues = {names: keys, values: sequence};\n    pushSerializeAndPop(\n      context,\n      PLACEMARK_SERIALIZERS,\n      EXTENDEDDATA_NODE_FACTORY,\n      [namesAndValues],\n      objectStack\n    );\n  }\n\n  // serialize geometry\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  let geometry = feature.getGeometry();\n  if (geometry) {\n    geometry = transformGeometryWithOptions(geometry, true, options);\n  }\n  pushSerializeAndPop(\n    context,\n    PLACEMARK_SERIALIZERS,\n    GEOMETRY_NODE_FACTORY,\n    [geometry],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'extrude',\n  'tessellate',\n  'altitudeMode',\n  'coordinates',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeChildAppender(writeBooleanTextNode),\n  'tessellate': makeChildAppender(writeBooleanTextNode),\n  'altitudeMode': makeChildAppender(writeStringTextNode),\n  'coordinates': makeChildAppender(writeCoordinatesTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePrimitiveGeometry(node, geometry, objectStack) {\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  context['layout'] = geometry.getLayout();\n  context['stride'] = geometry.getStride();\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = geometry.getProperties();\n  properties.coordinates = flatCoordinates;\n\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    PRIMITIVE_GEOMETRY_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'color',\n  'fill',\n  'outline',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'outerBoundaryIs': makeChildAppender(writeBoundaryIs),\n  'innerBoundaryIs': makeChildAppender(writeBoundaryIs),\n});\n\n/**\n * A factory for creating innerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');\n\n/**\n * A factory for creating outerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');\n\n/**\n * @param {Element} node Node.\n * @param {Polygon} polygon Polygon.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolygon(node, polygon, objectStack) {\n  const linearRings = polygon.getLinearRings();\n  const outerRing = linearRings.shift();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  // inner rings\n  pushSerializeAndPop(\n    context,\n    POLYGON_SERIALIZERS,\n    INNER_BOUNDARY_NODE_FACTORY,\n    linearRings,\n    objectStack\n  );\n  // outer ring\n  pushSerializeAndPop(\n    context,\n    POLYGON_SERIALIZERS,\n    OUTER_BOUNDARY_NODE_FACTORY,\n    [outerRing],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'fill': makeChildAppender(writeBooleanTextNode),\n  'outline': makeChildAppender(writeBooleanTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Style} style Style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolyStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const fill = style.getFill();\n  const stroke = style.getStroke();\n  const properties = {\n    'color': fill ? fill.getColor() : undefined,\n    'fill': fill ? undefined : false,\n    'outline': stroke ? undefined : false,\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    POLY_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the scale to.\n * @param {number|undefined} scale Scale.\n */\nfunction writeScaleTextNode(node, scale) {\n  // the Math is to remove any excess decimals created by float arithmetic\n  writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'IconStyle',\n  'LabelStyle',\n  'LineStyle',\n  'PolyStyle',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': makeChildAppender(writeIconStyle),\n  'LabelStyle': makeChildAppender(writeLabelStyle),\n  'LineStyle': makeChildAppender(writeLineStyle),\n  'PolyStyle': makeChildAppender(writePolyStyle),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Object<string, Array<Style>>} styles Styles.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeStyle(node, styles, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {};\n  if (styles.pointStyles.length) {\n    const textStyle = styles.pointStyles[0].getText();\n    if (textStyle) {\n      properties['LabelStyle'] = textStyle;\n    }\n    const imageStyle = styles.pointStyles[0].getImage();\n    if (\n      imageStyle &&\n      typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'\n    ) {\n      properties['IconStyle'] = imageStyle;\n    }\n  }\n  if (styles.lineStyles.length) {\n    const strokeStyle = styles.lineStyles[0].getStroke();\n    if (strokeStyle) {\n      properties['LineStyle'] = strokeStyle;\n    }\n  }\n  if (styles.polyStyles.length) {\n    const strokeStyle = styles.polyStyles[0].getStroke();\n    if (strokeStyle && !properties['LineStyle']) {\n      properties['LineStyle'] = strokeStyle;\n    }\n    properties['PolyStyle'] = styles.polyStyles[0];\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Element} node Node to append a TextNode with the Vec2 to.\n * @param {Vec2} vec2 Vec2.\n */\nfunction writeVec2(node, vec2) {\n  node.setAttribute('x', String(vec2.x));\n  node.setAttribute('y', String(vec2.y));\n  node.setAttribute('xunits', vec2.xunits);\n  node.setAttribute('yunits', vec2.yunits);\n}\n\nexport default KML;\n", "/**\n * @module ol/format/XML\n */\nimport {isDocument, parse} from '../xml.js';\n\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\nclass XML {\n  /**\n   * Read the source document.\n   *\n   * @param {Document|Element|string} source The XML source.\n   * @return {Object} An object representing the source.\n   * @api\n   */\n  read(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readFromNode(/** @type {Element} */ (source));\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Object} Object\n   */\n  readFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n  readFromNode(node) {}\n}\n\nexport default XML;\n", "/**\n * @module ol/format/xlink\n */\n\n/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n/**\n * @param {Element} node Node.\n * @return {string|undefined} href.\n */\nexport function readHref(node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n}\n", "/**\n * @module ol/format/OWS\n */\nimport XML from './XML.js';\nimport {\n  makeObjectPropertyPusher,\n  makeObjectPropertySetter,\n  makeStructureNS,\n  pushParseAndPop,\n} from '../xml.js';\nimport {readHref} from './xlink.js';\nimport {readString} from './xsd.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),\n  'ServiceProvider': makeObjectPropertySetter(readServiceProvider),\n  'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),\n});\n\nclass OWS extends XML {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n  readFromNode(node) {\n    const owsObject = pushParseAndPop({}, PARSERS, node, []);\n    return owsObject ? owsObject : null;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'DeliveryPoint': makeObjectPropertySetter(readString),\n  'City': makeObjectPropertySetter(readString),\n  'AdministrativeArea': makeObjectPropertySetter(readString),\n  'PostalCode': makeObjectPropertySetter(readString),\n  'Country': makeObjectPropertySetter(readString),\n  'ElectronicMailAddress': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Value': makeObjectPropertyPusher(readValue),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'AllowedValues': makeObjectPropertySetter(readAllowedValues),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Phone': makeObjectPropertySetter(readPhone),\n  'Address': makeObjectPropertySetter(readAddress),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DCP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'HTTP': makeObjectPropertySetter(readHttp),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Get': makeObjectPropertyPusher(readGet),\n  'Post': undefined, // TODO\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'DCP': makeObjectPropertySetter(readDcp),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Operation': readOperation,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Voice': makeObjectPropertySetter(readString),\n  'Facsimile': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Constraint': makeObjectPropertyPusher(readConstraint),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'IndividualName': makeObjectPropertySetter(readString),\n  'PositionName': makeObjectPropertySetter(readString),\n  'ContactInfo': makeObjectPropertySetter(readContactInfo),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Abstract': makeObjectPropertySetter(readString),\n  'AccessConstraints': makeObjectPropertySetter(readString),\n  'Fees': makeObjectPropertySetter(readString),\n  'Title': makeObjectPropertySetter(readString),\n  'ServiceTypeVersion': makeObjectPropertySetter(readString),\n  'ServiceType': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ProviderName': makeObjectPropertySetter(readString),\n  'ProviderSite': makeObjectPropertySetter(readHref),\n  'ServiceContact': makeObjectPropertySetter(readServiceContact),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The address.\n */\nfunction readAddress(node, objectStack) {\n  return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The values.\n */\nfunction readAllowedValues(node, objectStack) {\n  return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The constraint.\n */\nfunction readConstraint(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (!name) {\n    return undefined;\n  }\n  return pushParseAndPop({'name': name}, CONSTRAINT_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The contact info.\n */\nfunction readContactInfo(node, objectStack) {\n  return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The DCP.\n */\nfunction readDcp(node, objectStack) {\n  return pushParseAndPop({}, DCP_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The GET object.\n */\nfunction readGet(node, objectStack) {\n  const href = readHref(node);\n  if (!href) {\n    return undefined;\n  }\n  return pushParseAndPop(\n    {'href': href},\n    REQUEST_METHOD_PARSERS,\n    node,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The HTTP object.\n */\nfunction readHttp(node, objectStack) {\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operation.\n */\nfunction readOperation(node, objectStack) {\n  const name = node.getAttribute('name');\n  const value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);\n  if (!value) {\n    return undefined;\n  }\n  const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  object[name] = value;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operations metadata.\n */\nfunction readOperationsMetadata(node, objectStack) {\n  return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The phone.\n */\nfunction readPhone(node, objectStack) {\n  return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service identification.\n */\nfunction readServiceIdentification(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service contact.\n */\nfunction readServiceContact(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service provider.\n */\nfunction readServiceProvider(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {string|undefined} The value.\n */\nfunction readValue(node, objectStack) {\n  return readString(node);\n}\n\nexport default OWS;\n", "/**\n * @module ol/geom/flat/flip\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destOffset] Destination offset.\n * @return {Array<number>} Flat coordinates.\n */\nexport function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {\n  if (dest !== undefined) {\n    dest = dest;\n    destOffset = destOffset !== undefined ? destOffset : 0;\n  } else {\n    dest = [];\n    destOffset = 0;\n  }\n  let j = offset;\n  while (j < end) {\n    const x = flatCoordinates[j++];\n    dest[destOffset++] = flatCoordinates[j++];\n    dest[destOffset++] = x;\n    for (let k = 2; k < stride; ++k) {\n      dest[destOffset++] = flatCoordinates[j++];\n    }\n  }\n  dest.length = destOffset;\n  return dest;\n}\n", "/**\n * @module ol/format/Polyline\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport {assert} from '../asserts.js';\nimport {flipXY} from '../geom/flat/flip.js';\nimport {get as getProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * When reading features, the coordinates are assumed to be in two dimensions\n * and in [latitude, longitude] order.\n *\n * As Polyline sources contain a single feature,\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\n * feature in an array.\n *\n * @api\n */\nclass Polyline extends TextFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.factor_ = options.factor ? options.factor : 1e5;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n  }\n\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    const geometry = this.readGeometryFromText(text, options);\n    return new Feature(geometry);\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    const feature = this.readFeatureFromText(text, options);\n    return [feature];\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromText(text, options) {\n    const stride = getStrideForLayout(this.geometryLayout_);\n    const flatCoordinates = decodeDeltas(text, stride, this.factor_);\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    const coordinates = inflateCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride\n    );\n    const lineString = new LineString(coordinates, this.geometryLayout_);\n\n    return transformGeometryWithOptions(\n      lineString,\n      false,\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeatureText(feature, options) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      return this.writeGeometryText(geometry, options);\n    }\n    assert(false, 40); // Expected `feature` to have a geometry\n    return '';\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeaturesText(features, options) {\n    return this.writeFeatureText(features[0], options);\n  }\n\n  /**\n   * @param {LineString} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeGeometryText(geometry, options) {\n    geometry =\n      /** @type {LineString} */\n      (\n        transformGeometryWithOptions(geometry, true, this.adaptOptions(options))\n      );\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\n  }\n}\n\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number} [factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeDeltas(numbers, stride, factor) {\n  factor = factor ? factor : 1e5;\n  let d;\n\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  for (let i = 0, ii = numbers.length; i < ii; ) {\n    for (d = 0; d < stride; ++d, ++i) {\n      const num = numbers[i];\n      const delta = num - lastNumbers[d];\n      lastNumbers[d] = num;\n\n      numbers[i] = delta;\n    }\n  }\n\n  return encodeFloats(numbers, factor);\n}\n\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number} [factor] The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array<number>} A list of n-dimensional points.\n * @api\n */\nexport function decodeDeltas(encoded, stride, factor) {\n  factor = factor ? factor : 1e5;\n  let d;\n\n  /** @type {Array<number>} */\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  const numbers = decodeFloats(encoded, factor);\n\n  for (let i = 0, ii = numbers.length; i < ii; ) {\n    for (d = 0; d < stride; ++d, ++i) {\n      lastNumbers[d] += numbers[i];\n\n      numbers[i] = lastNumbers[d];\n    }\n  }\n\n  return numbers;\n}\n\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of floating point numbers.\n * @param {number} [factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeFloats(numbers, factor) {\n  factor = factor ? factor : 1e5;\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] = Math.round(numbers[i] * factor);\n  }\n\n  return encodeSignedIntegers(numbers);\n}\n\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} [factor] The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array<number>} A list of floating point numbers.\n * @api\n */\nexport function decodeFloats(encoded, factor) {\n  factor = factor ? factor : 1e5;\n  const numbers = decodeSignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] /= factor;\n  }\n  return numbers;\n}\n\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\nexport function encodeSignedIntegers(numbers) {\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\n  }\n  return encodeUnsignedIntegers(numbers);\n}\n\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of signed integers.\n */\nexport function decodeSignedIntegers(encoded) {\n  const numbers = decodeUnsignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\n  }\n  return numbers;\n}\n\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedIntegers(numbers) {\n  let encoded = '';\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    encoded += encodeUnsignedInteger(numbers[i]);\n  }\n  return encoded;\n}\n\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of unsigned integers.\n */\nexport function decodeUnsignedIntegers(encoded) {\n  const numbers = [];\n  let current = 0;\n  let shift = 0;\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\n    const b = encoded.charCodeAt(i) - 63;\n    current |= (b & 0x1f) << shift;\n    if (b < 0x20) {\n      numbers.push(current);\n      current = 0;\n      shift = 0;\n    } else {\n      shift += 5;\n    }\n  }\n  return numbers;\n}\n\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedInteger(num) {\n  let value,\n    encoded = '';\n  while (num >= 0x20) {\n    value = (0x20 | (num & 0x1f)) + 63;\n    encoded += String.fromCharCode(value);\n    num >>= 5;\n  }\n  value = num + 63;\n  encoded += String.fromCharCode(value);\n  return encoded;\n}\n\nexport default Polyline;\n", "/**\n * @module ol/format/TopoJSON\n */\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"topojson-specification\").Topology} TopoJSONTopology\n * @typedef {import(\"topojson-specification\").GeometryCollection} TopoJSONGeometryCollection\n * @typedef {import(\"topojson-specification\").GeometryObject} TopoJSONGeometry\n * @typedef {import(\"topojson-specification\").Point} TopoJSONPoint\n * @typedef {import(\"topojson-specification\").MultiPoint} TopoJSONMultiPoint\n * @typedef {import(\"topojson-specification\").LineString} TopoJSONLineString\n * @typedef {import(\"topojson-specification\").MultiLineString} TopoJSONMultiLineString\n * @typedef {import(\"topojson-specification\").Polygon} TopoJSONPolygon\n * @typedef {import(\"topojson-specification\").MultiPolygon} TopoJSONMultiPolygon\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {string} [layerName] Set the name of the TopoJSON topology\n * `objects`'s children as feature property with the specified name. This means\n * that when set to `'layer'`, a topology like\n * ```\n * {\n *   \"type\": \"Topology\",\n *   \"objects\": {\n *     \"example\": {\n *       \"type\": \"GeometryCollection\",\n *       \"geometries\": []\n *     }\n *   }\n * }\n * ```\n * will result in features that have a property `'layer'` set to `'example'`.\n * When not set, no property will be added to features.\n * @property {Array<string>} [layers] Names of the TopoJSON topology's\n * `objects`'s children to read features from.  If not provided, features will\n * be read from all children.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the TopoJSON format.\n *\n * @api\n */\nclass TopoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.layerName_ = options.layerName;\n\n    /**\n     * @private\n     * @type {?Array<string>}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    if (object.type == 'Topology') {\n      const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);\n      let transform,\n        scale = null,\n        translate = null;\n      if (topoJSONTopology['transform']) {\n        transform = topoJSONTopology['transform'];\n        scale = transform['scale'];\n        translate = transform['translate'];\n      }\n      const arcs = topoJSONTopology['arcs'];\n      if (transform) {\n        transformArcs(arcs, scale, translate);\n      }\n      /** @type {Array<Feature>} */\n      const features = [];\n      const topoJSONFeatures = topoJSONTopology['objects'];\n      const property = this.layerName_;\n      let feature;\n      for (const objectName in topoJSONFeatures) {\n        if (this.layers_ && !this.layers_.includes(objectName)) {\n          continue;\n        }\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\n          feature = /** @type {TopoJSONGeometryCollection} */ (\n            topoJSONFeatures[objectName]\n          );\n          features.push.apply(\n            features,\n            readFeaturesFromGeometryCollection(\n              feature,\n              arcs,\n              scale,\n              translate,\n              property,\n              objectName,\n              options\n            )\n          );\n        } else {\n          feature = /** @type {TopoJSONGeometry} */ (\n            topoJSONFeatures[objectName]\n          );\n          features.push(\n            readFeatureFromGeometry(\n              feature,\n              arcs,\n              scale,\n              translate,\n              property,\n              objectName,\n              options\n            )\n          );\n        }\n      }\n      return features;\n    }\n    return [];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return this.dataProjection;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n};\n\n/**\n * Concatenate arcs into a coordinate array.\n * @param {Array<number>} indices Indices of arcs to concatenate.  Negative\n *     values indicate arcs need to be reversed.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs (already\n *     transformed).\n * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates array.\n */\nfunction concatenateArcs(indices, arcs) {\n  /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n  const coordinates = [];\n  let index;\n  for (let i = 0, ii = indices.length; i < ii; ++i) {\n    index = indices[i];\n    if (i > 0) {\n      // splicing together arcs, discard last point\n      coordinates.pop();\n    }\n    if (index >= 0) {\n      // forward arc\n      const arc = arcs[index];\n      for (let j = 0, jj = arc.length; j < jj; ++j) {\n        coordinates.push(arc[j].slice(0));\n      }\n    } else {\n      // reverse arc\n      const arc = arcs[~index];\n      for (let j = arc.length - 1; j >= 0; --j) {\n        coordinates.push(arc[j].slice(0));\n      }\n    }\n  }\n  return coordinates;\n}\n\n/**\n * Create a point from a TopoJSON geometry object.\n *\n * @param {TopoJSONPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {Point} Geometry.\n */\nfunction readPointGeometry(object, scale, translate) {\n  const coordinates = object['coordinates'];\n  if (scale && translate) {\n    transformVertex(coordinates, scale, translate);\n  }\n  return new Point(coordinates);\n}\n\n/**\n * Create a multi-point from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {MultiPoint} Geometry.\n */\nfunction readMultiPointGeometry(object, scale, translate) {\n  const coordinates = object['coordinates'];\n  if (scale && translate) {\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      transformVertex(coordinates[i], scale, translate);\n    }\n  }\n  return new MultiPoint(coordinates);\n}\n\n/**\n * Create a linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {LineString} Geometry.\n */\nfunction readLineStringGeometry(object, arcs) {\n  const coordinates = concatenateArcs(object['arcs'], arcs);\n  return new LineString(coordinates);\n}\n\n/**\n * Create a multi-linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiLineString} Geometry.\n */\nfunction readMultiLineStringGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n  return new MultiLineString(coordinates);\n}\n\n/**\n * Create a polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {Polygon} Geometry.\n */\nfunction readPolygonGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n  return new Polygon(coordinates);\n}\n\n/**\n * Create a multi-polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiPolygon} Geometry.\n */\nfunction readMultiPolygonGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    // for each polygon\n    const polyArray = object['arcs'][i];\n    const ringCoords = [];\n    for (let j = 0, jj = polyArray.length; j < jj; ++j) {\n      // for each ring\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\n    }\n    coordinates[i] = ringCoords;\n  }\n  return new MultiPolygon(coordinates);\n}\n\n/**\n * Create features from a TopoJSON GeometryCollection object.\n *\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\n *     object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {Array<Feature>} Array of features.\n */\nfunction readFeaturesFromGeometryCollection(\n  collection,\n  arcs,\n  scale,\n  translate,\n  property,\n  name,\n  options\n) {\n  const geometries = collection['geometries'];\n  const features = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    features[i] = readFeatureFromGeometry(\n      geometries[i],\n      arcs,\n      scale,\n      translate,\n      property,\n      name,\n      options\n    );\n  }\n  return features;\n}\n\n/**\n * Create a feature from a TopoJSON geometry object.\n *\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {Feature} Feature.\n */\nfunction readFeatureFromGeometry(\n  object,\n  arcs,\n  scale,\n  translate,\n  property,\n  name,\n  options\n) {\n  let geometry = null;\n  const type = object.type;\n  if (type) {\n    const geometryReader = GEOMETRY_READERS[type];\n    if (type === 'Point' || type === 'MultiPoint') {\n      geometry = geometryReader(object, scale, translate);\n    } else {\n      geometry = geometryReader(object, arcs);\n    }\n    geometry = transformGeometryWithOptions(geometry, false, options);\n  }\n  const feature = new Feature({geometry: geometry});\n  if (object.id !== undefined) {\n    feature.setId(object.id);\n  }\n  let properties = object.properties;\n  if (property) {\n    if (!properties) {\n      properties = {};\n    }\n    properties[property] = name;\n  }\n  if (properties) {\n    feature.setProperties(properties, true);\n  }\n  return feature;\n}\n\n/**\n * Apply a linear transform to array of arcs.  The provided array of arcs is\n * modified in place.\n *\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformArcs(arcs, scale, translate) {\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\n    transformArc(arcs[i], scale, translate);\n  }\n}\n\n/**\n * Apply a linear transform to an arc.  The provided arc is modified in place.\n *\n * @param {Array<import(\"../coordinate.js\").Coordinate>} arc Arc.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformArc(arc, scale, translate) {\n  let x = 0;\n  let y = 0;\n  for (let i = 0, ii = arc.length; i < ii; ++i) {\n    const vertex = arc[i];\n    x += vertex[0];\n    y += vertex[1];\n    vertex[0] = x;\n    vertex[1] = y;\n    transformVertex(vertex, scale, translate);\n  }\n}\n\n/**\n * Apply a linear transform to a vertex.  The provided vertex is modified in\n * place.\n *\n * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformVertex(vertex, scale, translate) {\n  vertex[0] = vertex[0] * scale[0] + translate[0];\n  vertex[1] = vertex[1] * scale[1] + translate[1];\n}\n\nexport default TopoJSON;\n", "/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport {\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n} from '../xml.js';\nimport {writeStringTextNode} from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    objectStack[objectStack.length - 1] = Object.assign(\n      {multiCurve: true, multiSurface: true},\n      context\n    );\n    super.writeGeometryElement(node, geometry, objectStack);\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n", "/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n", "/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n", "/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n", "/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Bbox;\n", "/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, srsName) {\n  return new Bbox(geometryName, extent, srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, srsName) {\n  return new Contains(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, srsName) {\n  return new Intersects(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, srsName) {\n  return new Disjoint(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, srsName) {\n  return new Within(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, matchCase) {\n  return new EqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, matchCase) {\n  return new NotEqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  wildCard,\n  singleChar,\n  escapeChar,\n  matchCase\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n", "/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {assert} from '../asserts.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readExtentElement,\n      'bounds'\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source)\n      );\n    }\n    return this.readTransactionResponseFromNode(\n      /** @type {Element} */ (source)\n    );\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source)\n      );\n    }\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Element} */ (source)\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n)\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures')\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      []\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter\n        );\n      }\n      Object.assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context]\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter\n        );\n        Object.assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\n    if (filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version]\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = Object.assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.startsWith(prefix)) {\n    return featureType;\n  }\n  return prefix + featureType;\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const name = createElementNS(ns, 'Name');\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack\n    );\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, version) {\n  version = version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  Object.assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n", "/**\n * @module ol/format/WKB\n */\nimport Feature from '../Feature.js';\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\n\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\n\n// WKB spec: https://www.ogc.org/standards/sfa\n// EWKB spec: https://raw.githubusercontent.com/postgis/postgis/2.1.0/doc/ZMSgeoms.txt\n\n/**\n * @const\n * @enum {number}\n */\nconst WKBGeometryType = {\n  POINT: 1,\n  LINE_STRING: 2,\n  POLYGON: 3,\n  MULTI_POINT: 4,\n  MULTI_LINE_STRING: 5,\n  MULTI_POLYGON: 6,\n  GEOMETRY_COLLECTION: 7,\n\n  /*\n  CIRCULAR_STRING: 8,\n  COMPOUND_CURVE: 9,\n  CURVE_POLYGON: 10,\n\n  MULTI_CURVE: 11,\n  MULTI_SURFACE: 12,\n  CURVE: 13,\n  SURFACE: 14,\n  */\n\n  POLYHEDRAL_SURFACE: 15,\n  TIN: 16,\n  TRIANGLE: 17,\n};\n\nclass WkbReader {\n  /**\n   * @param {DataView} view source to read\n   */\n  constructor(view) {\n    /** @private */\n    this.view_ = view;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pos_ = 0;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.initialized_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isLittleEndian_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasZ_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasM_ = false;\n\n    /**\n     * @type {number|null}\n     * @private\n     */\n    this.srid_ = null;\n\n    /**\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     * @private\n     */\n    this.layout_ = 'XY';\n  }\n\n  /**\n   * @return {number} value\n   */\n  readUint8() {\n    return this.view_.getUint8(this.pos_++);\n  }\n\n  /**\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\n   * @return {number} value\n   */\n  readUint32(isLittleEndian) {\n    return this.view_.getUint32(\n      (this.pos_ += 4) - 4,\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\n    );\n  }\n\n  /**\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\n   * @return {number} value\n   */\n  readDouble(isLittleEndian) {\n    return this.view_.getFloat64(\n      (this.pos_ += 8) - 8,\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\n    );\n  }\n\n  /**\n   * @return {import('../coordinate.js').Coordinate} coords for Point\n   */\n  readPoint() {\n    /** @type import('../coordinate.js').Coordinate */\n    const coords = [];\n\n    coords.push(this.readDouble());\n    coords.push(this.readDouble());\n    if (this.hasZ_) {\n      coords.push(this.readDouble());\n    }\n    if (this.hasM_) {\n      coords.push(this.readDouble());\n    }\n\n    return coords;\n  }\n\n  /**\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for LineString / LinearRing\n   */\n  readLineString() {\n    const numPoints = this.readUint32();\n\n    /** @type Array<import('../coordinate.js').Coordinate> */\n    const coords = [];\n    for (let i = 0; i < numPoints; i++) {\n      coords.push(this.readPoint());\n    }\n\n    return coords;\n  }\n\n  /**\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for Polygon like\n   */\n  readPolygon() {\n    const numRings = this.readUint32();\n\n    /** @type Array<Array<import('../coordinate.js').Coordinate>> */\n    const rings = [];\n    for (let i = 0; i < numRings; i++) {\n      rings.push(this.readLineString()); // as a LinearRing\n    }\n\n    return rings;\n  }\n\n  /**\n   * @param {number} [expectedTypeId] Expected WKB Type ID\n   * @return {number} WKB Type ID\n   */\n  readWkbHeader(expectedTypeId) {\n    const byteOrder = this.readUint8();\n    const isLittleEndian = byteOrder > 0;\n\n    const wkbType = this.readUint32(isLittleEndian);\n    const wkbTypeThousandth = Math.floor((wkbType & 0x0fffffff) / 1000);\n    const hasZ =\n      Boolean(wkbType & 0x80000000) ||\n      wkbTypeThousandth === 1 ||\n      wkbTypeThousandth === 3;\n    const hasM =\n      Boolean(wkbType & 0x40000000) ||\n      wkbTypeThousandth === 2 ||\n      wkbTypeThousandth === 3;\n    const hasSRID = Boolean(wkbType & 0x20000000);\n    const typeId = (wkbType & 0x0fffffff) % 1000; // Assume 1000 is an upper limit for type ID\n    const layout = /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */ (\n      ['XY', hasZ ? 'Z' : '', hasM ? 'M' : ''].join('')\n    );\n\n    const srid = hasSRID ? this.readUint32(isLittleEndian) : null;\n\n    if (expectedTypeId !== undefined && expectedTypeId !== typeId) {\n      throw new Error('Unexpected WKB geometry type ' + typeId);\n    }\n\n    if (this.initialized_) {\n      // sanity checks\n      if (this.isLittleEndian_ !== isLittleEndian) {\n        throw new Error('Inconsistent endian');\n      }\n      if (this.layout_ !== layout) {\n        throw new Error('Inconsistent geometry layout');\n      }\n      if (srid && this.srid_ !== srid) {\n        throw new Error('Inconsistent coordinate system (SRID)');\n      }\n    } else {\n      this.isLittleEndian_ = isLittleEndian;\n      this.hasZ_ = hasZ;\n      this.hasM_ = hasM;\n      this.layout_ = layout;\n      this.srid_ = srid;\n      this.initialized_ = true;\n    }\n\n    return typeId;\n  }\n\n  /**\n   * @param {number} typeId WKB Type ID\n   * @return {any} values read\n   */\n  readWkbPayload(typeId) {\n    switch (typeId) {\n      case WKBGeometryType.POINT:\n        return this.readPoint();\n\n      case WKBGeometryType.LINE_STRING:\n        return this.readLineString();\n\n      case WKBGeometryType.POLYGON:\n      case WKBGeometryType.TRIANGLE:\n        return this.readPolygon();\n\n      case WKBGeometryType.MULTI_POINT:\n        return this.readMultiPoint();\n\n      case WKBGeometryType.MULTI_LINE_STRING:\n        return this.readMultiLineString();\n\n      case WKBGeometryType.MULTI_POLYGON:\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\n      case WKBGeometryType.TIN:\n        return this.readMultiPolygon();\n\n      case WKBGeometryType.GEOMETRY_COLLECTION:\n        return this.readGeometryCollection();\n\n      default:\n        throw new Error(\n          'Unsupported WKB geometry type ' + typeId + ' is found'\n        );\n    }\n  }\n\n  /**\n   * @param {number} expectedTypeId Expected WKB Type ID\n   * @return {any} values read\n   */\n  readWkbBlock(expectedTypeId) {\n    return this.readWkbPayload(this.readWkbHeader(expectedTypeId));\n  }\n\n  /**\n   * @param {Function} reader reader function for each item\n   * @param {number} [expectedTypeId] Expected WKB Type ID\n   * @return {any} values read\n   */\n  readWkbCollection(reader, expectedTypeId) {\n    const num = this.readUint32();\n\n    const items = [];\n    for (let i = 0; i < num; i++) {\n      const result = reader.call(this, expectedTypeId);\n      if (result) {\n        items.push(result);\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for MultiPoint\n   */\n  readMultiPoint() {\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POINT);\n  }\n\n  /**\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for MultiLineString like\n   */\n  readMultiLineString() {\n    return this.readWkbCollection(\n      this.readWkbBlock,\n      WKBGeometryType.LINE_STRING\n    );\n  }\n\n  /**\n   * @return {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords for MultiPolygon like\n   */\n  readMultiPolygon() {\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POLYGON);\n  }\n\n  /**\n   * @return {Array<import('../geom/Geometry.js').default>} array of geometries\n   */\n  readGeometryCollection() {\n    return this.readWkbCollection(this.readGeometry);\n  }\n\n  /**\n   * @return {import('../geom/Geometry.js').default} geometry\n   */\n  readGeometry() {\n    const typeId = this.readWkbHeader();\n    const result = this.readWkbPayload(typeId);\n\n    switch (typeId) {\n      case WKBGeometryType.POINT:\n        return new Point(\n          /** @type {import('../coordinate.js').Coordinate} */ (result),\n          this.layout_\n        );\n\n      case WKBGeometryType.LINE_STRING:\n        return new LineString(\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\n          this.layout_\n        );\n\n      case WKBGeometryType.POLYGON:\n      case WKBGeometryType.TRIANGLE:\n        return new Polygon(\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\n            result\n          ),\n          this.layout_\n        );\n\n      case WKBGeometryType.MULTI_POINT:\n        return new MultiPoint(\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\n          this.layout_\n        );\n\n      case WKBGeometryType.MULTI_LINE_STRING:\n        return new MultiLineString(\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\n            result\n          ),\n          this.layout_\n        );\n\n      case WKBGeometryType.MULTI_POLYGON:\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\n      case WKBGeometryType.TIN:\n        return new MultiPolygon(\n          /** @type {Array<Array<Array<import('../coordinate.js').Coordinate>>>} */ (\n            result\n          ),\n          this.layout_\n        );\n\n      case WKBGeometryType.GEOMETRY_COLLECTION:\n        return new GeometryCollection(\n          /** @type {Array<import('../geom/Geometry.js').default>} */ (result)\n        );\n\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * @return {number|null} SRID in the EWKB. `null` if not defined.\n   */\n  getSrid() {\n    return this.srid_;\n  }\n}\n\nclass WkbWriter {\n  /**\n   * @type {Object}\n   * @property {string} [layout] geometryLayout\n   * @property {boolean} [littleEndian=true] littleEndian\n   * @property {boolean} [ewkb=true] Whether writes in EWKB format\n   * @property {Object} [nodata] NoData value for each axes\n   * @param {Object} opts options\n   */\n  constructor(opts) {\n    opts = opts || {};\n\n    /** @type {string} */\n    this.layout_ = opts.layout;\n    this.isLittleEndian_ = opts.littleEndian !== false;\n\n    this.isEWKB_ = opts.ewkb !== false;\n\n    /** @type {Array<Array<number>>} */\n    this.writeQueue_ = [];\n\n    /**\n     * @type {Object}\n     * @property {number} X NoData value for X\n     * @property {number} Y NoData value for Y\n     * @property {number} Z NoData value for Z\n     * @property {number} M NoData value for M\n     */\n    this.nodata_ = Object.assign({X: 0, Y: 0, Z: 0, M: 0}, opts.nodata);\n  }\n\n  /**\n   * @param {number} value value\n   */\n  writeUint8(value) {\n    this.writeQueue_.push([1, value]);\n  }\n\n  /**\n   * @param {number} value value\n   */\n  writeUint32(value) {\n    this.writeQueue_.push([4, value]);\n  }\n\n  /**\n   * @param {number} value value\n   */\n  writeDouble(value) {\n    this.writeQueue_.push([8, value]);\n  }\n\n  /**\n   * @param {import('../coordinate.js').Coordinate} coords coords\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writePoint(coords, layout) {\n    /**\n     * @type {Object}\n     * @property {number} X NoData value for X\n     * @property {number} Y NoData value for Y\n     * @property {number} [Z] NoData value for Z\n     * @property {number} [M] NoData value for M\n     */\n    const coordsObj = Object.assign.apply(\n      null,\n      layout.split('').map((axis, idx) => ({[axis]: coords[idx]}))\n    );\n\n    for (const axis of this.layout_) {\n      this.writeDouble(\n        axis in coordsObj ? coordsObj[axis] : this.nodata_[axis]\n      );\n    }\n  }\n\n  /**\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writeLineString(coords, layout) {\n    this.writeUint32(coords.length); // numPoints\n    for (let i = 0; i < coords.length; i++) {\n      this.writePoint(coords[i], layout);\n    }\n  }\n\n  /**\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} rings rings\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writePolygon(rings, layout) {\n    this.writeUint32(rings.length); // numRings\n    for (let i = 0; i < rings.length; i++) {\n      this.writeLineString(rings[i], layout); // as a LinearRing\n    }\n  }\n\n  /**\n   * @param {number} wkbType WKB Type ID\n   * @param {number} [srid] SRID\n   */\n  writeWkbHeader(wkbType, srid) {\n    wkbType %= 1000; // Assume 1000 is an upper limit for type ID\n    if (this.layout_.includes('Z')) {\n      wkbType += this.isEWKB_ ? 0x80000000 : 1000;\n    }\n    if (this.layout_.includes('M')) {\n      wkbType += this.isEWKB_ ? 0x40000000 : 2000;\n    }\n    if (this.isEWKB_ && Number.isInteger(srid)) {\n      wkbType |= 0x20000000;\n    }\n\n    this.writeUint8(this.isLittleEndian_ ? 1 : 0);\n    this.writeUint32(wkbType);\n    if (this.isEWKB_ && Number.isInteger(srid)) {\n      this.writeUint32(srid);\n    }\n  }\n\n  /**\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writeMultiPoint(coords, layout) {\n    this.writeUint32(coords.length); // numItems\n    for (let i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(1);\n      this.writePoint(coords[i], layout);\n    }\n  }\n\n  /**\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} coords coords\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writeMultiLineString(coords, layout) {\n    this.writeUint32(coords.length); // numItems\n    for (let i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(2);\n      this.writeLineString(coords[i], layout);\n    }\n  }\n\n  /**\n   * @param {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords coords\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\n   */\n  writeMultiPolygon(coords, layout) {\n    this.writeUint32(coords.length); // numItems\n    for (let i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(3);\n      this.writePolygon(coords[i], layout);\n    }\n  }\n\n  /**\n   * @param {Array<import('../geom/Geometry.js').default>} geometries geometries\n   */\n  writeGeometryCollection(geometries) {\n    this.writeUint32(geometries.length); // numItems\n\n    for (let i = 0; i < geometries.length; i++) {\n      this.writeGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} [layout] layout\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} minumum layout made by common axes\n   */\n  findMinimumLayout(geom, layout = 'XYZM') {\n    /**\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} a A\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} b B\n     * @return {import(\"../geom/Geometry.js\").GeometryLayout} minumum layout made by common axes\n     */\n    const GeometryLayout_min = (a, b) => {\n      if (a === b) {\n        return a;\n      }\n\n      if (a === 'XYZM') {\n        // anything `b` is minimum\n        return b;\n      }\n      if (b === 'XYZM') {\n        // anything `a` is minimum\n        return a;\n      }\n\n      // otherwise, incompatible\n      return 'XY';\n    };\n\n    if (geom instanceof SimpleGeometry) {\n      return GeometryLayout_min(geom.getLayout(), layout);\n    }\n\n    if (geom instanceof GeometryCollection) {\n      const geoms = geom.getGeometriesArray();\n      for (let i = 0; i < geoms.length && layout !== 'XY'; i++) {\n        layout = this.findMinimumLayout(geoms[i], layout);\n      }\n    }\n\n    return layout;\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\n   * @param {number} [srid] SRID\n   */\n  writeGeometry(geom, srid) {\n    /**\n     * @type {Object<import(\"../geom/Geometry.js\").Type, WKBGeometryType>}\n     */\n    const wkblut = {\n      Point: WKBGeometryType.POINT,\n      LineString: WKBGeometryType.LINE_STRING,\n      Polygon: WKBGeometryType.POLYGON,\n      MultiPoint: WKBGeometryType.MULTI_POINT,\n      MultiLineString: WKBGeometryType.MULTI_LINE_STRING,\n      MultiPolygon: WKBGeometryType.MULTI_POLYGON,\n      GeometryCollection: WKBGeometryType.GEOMETRY_COLLECTION,\n    };\n    const geomType = geom.getType();\n    const typeId = wkblut[geomType];\n\n    if (!typeId) {\n      throw new Error('GeometryType ' + geomType + ' is not supported');\n    }\n\n    // first call of writeGeometry() traverse whole geometries to determine its output layout if not specified on constructor.\n    if (!this.layout_) {\n      this.layout_ = this.findMinimumLayout(geom);\n    }\n\n    this.writeWkbHeader(typeId, srid);\n\n    if (geom instanceof SimpleGeometry) {\n      const writerLUT = {\n        Point: this.writePoint,\n        LineString: this.writeLineString,\n        Polygon: this.writePolygon,\n        MultiPoint: this.writeMultiPoint,\n        MultiLineString: this.writeMultiLineString,\n        MultiPolygon: this.writeMultiPolygon,\n      };\n      writerLUT[geomType].call(this, geom.getCoordinates(), geom.getLayout());\n    } else if (geom instanceof GeometryCollection) {\n      this.writeGeometryCollection(geom.getGeometriesArray());\n    }\n  }\n\n  getBuffer() {\n    const byteLength = this.writeQueue_.reduce((acc, item) => acc + item[0], 0);\n    const buffer = new ArrayBuffer(byteLength);\n    const view = new DataView(buffer);\n\n    let pos = 0;\n    this.writeQueue_.forEach((item) => {\n      switch (item[0]) {\n        case 1:\n          view.setUint8(pos, item[1]);\n          break;\n        case 4:\n          view.setUint32(pos, item[1], this.isLittleEndian_);\n          break;\n        case 8:\n          view.setFloat64(pos, item[1], this.isLittleEndian_);\n          break;\n        default:\n          break;\n      }\n\n      pos += item[0];\n    });\n\n    return buffer;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into multiple features on reading.\n * @property {boolean} [hex=true] Returns hex string instead of ArrayBuffer for output. This also is used as a hint internally whether it should load contents as text or ArrayBuffer on reading.\n * @property {boolean} [littleEndian=true] Use littleEndian for output.\n * @property {boolean} [ewkb=true] Use EWKB format for output.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout=null] Use specific coordinate layout for output features (null: auto detect)\n * @property {number} [nodataZ=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of Z.\n * @property {number} [nodataM=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of M.\n * @property {number|boolean} [srid=true] SRID for output. Specify integer value to enforce the value as a SRID. Specify `true` to extract from `dataProjection`. `false` to suppress the output. This option only takes effect when `ewkb` is `true`.\n */\n\n/**\n * @classdesc\n * Geometry format for reading and writing data in the `Well-Known Binary` (WKB) format.\n * Also supports `Extended Well-Known Binary` (EWKB) format, used in PostGIS for example.\n *\n * @api\n */\nclass WKB extends FeatureFormat {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    this.splitCollection = Boolean(options.splitCollection);\n\n    this.viewCache_ = null;\n\n    this.hex_ = options.hex !== false;\n    this.littleEndian_ = options.littleEndian !== false;\n    this.ewkb_ = options.ewkb !== false;\n\n    this.layout_ = options.geometryLayout; // null for auto detect\n    this.nodataZ_ = options.nodataZ || 0;\n    this.nodataM_ = options.nodataM || 0;\n\n    this.srid_ = options.srid;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return this.hex_ ? 'text' : 'arraybuffer';\n  }\n\n  /**\n   * Read a single feature from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return new Feature({\n      geometry: this.readGeometry(source, options),\n    });\n  }\n\n  /**\n   * Read all features from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    let geometries = [];\n    const geometry = this.readGeometry(source, options);\n    if (this.splitCollection && geometry instanceof GeometryCollection) {\n      geometries = geometry.getGeometriesArray();\n    } else {\n      geometries = [geometry];\n    }\n    return geometries.map((geometry) => new Feature({geometry}));\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    const view = getDataView(source);\n    if (!view) {\n      return null;\n    }\n\n    const reader = new WkbReader(view);\n    const geometry = reader.readGeometry();\n\n    this.viewCache_ = view; // cache for internal subsequent call of readProjection()\n    options = this.getReadOptions(source, options);\n    this.viewCache_ = null; // release\n\n    return transformGeometryWithOptions(geometry, false, options);\n  }\n\n  /**\n   * Read the projection from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   * @api\n   */\n  readProjection(source) {\n    const view = this.viewCache_ || getDataView(source);\n    if (!view) {\n      return undefined;\n    }\n\n    const reader = new WkbReader(view);\n    reader.readWkbHeader();\n\n    return (\n      (reader.getSrid() && getProjection('EPSG:' + reader.getSrid())) ||\n      undefined\n    );\n  }\n\n  /**\n   * Encode a feature in this format.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return this.writeGeometry(feature.getGeometry(), options);\n  }\n\n  /**\n   * Encode an array of features in this format.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return this.writeGeometry(\n      new GeometryCollection(features.map((f) => f.getGeometry())),\n      options\n    );\n  }\n\n  /**\n   * Write a single geometry in this format.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    options = this.adaptOptions(options);\n\n    const writer = new WkbWriter({\n      layout: this.layout_,\n      littleEndian: this.littleEndian_,\n      ewkb: this.ewkb_,\n\n      nodata: {\n        Z: this.nodataZ_,\n        M: this.nodataM_,\n      },\n    });\n\n    // extract SRID from `dataProjection`\n    let srid = Number.isInteger(this.srid_) ? Number(this.srid_) : null;\n    if (this.srid_ !== false && !Number.isInteger(this.srid_)) {\n      const dataProjection =\n        options.dataProjection && getProjection(options.dataProjection);\n      if (dataProjection) {\n        const code = dataProjection.getCode();\n        if (code.startsWith('EPSG:')) {\n          srid = Number(code.substring(5));\n        }\n      }\n    }\n\n    writer.writeGeometry(\n      transformGeometryWithOptions(geometry, true, options),\n      srid\n    );\n    const buffer = writer.getBuffer();\n\n    return this.hex_ ? encodeHexString(buffer) : buffer;\n  }\n}\n\n/**\n * @param {ArrayBuffer} buffer source buffer\n * @return {string} encoded hex string\n */\nfunction encodeHexString(buffer) {\n  const view = new Uint8Array(buffer);\n  return Array.from(view.values())\n    .map((x) => (x < 16 ? '0' : '') + Number(x).toString(16).toUpperCase())\n    .join('');\n}\n\n/**\n * @param {string} text source text\n * @return {DataView} decoded binary buffer\n */\nfunction decodeHexString(text) {\n  const buffer = new Uint8Array(text.length / 2);\n  for (let i = 0; i < text.length / 2; i++) {\n    buffer[i] = parseInt(text.substr(i * 2, 2), 16);\n  }\n  return new DataView(buffer.buffer);\n}\n\n/**\n * @param {string | ArrayBuffer | ArrayBufferView} source source\n * @return {DataView} data view\n */\nfunction getDataView(source) {\n  if (typeof source === 'string') {\n    return decodeHexString(source);\n  } else if (ArrayBuffer.isView(source)) {\n    if (source instanceof DataView) {\n      return source;\n    }\n    return new DataView(source.buffer, source.byteOffset, source.byteLength);\n  } else if (source instanceof ArrayBuffer) {\n    return new DataView(source);\n  }\n  return null;\n}\n\nexport default WKB;\n", "/**\n * @module ol/format/WKT\n */\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport TextFeature from './TextFeature.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * Geometry constructors\n * @enum {function (new:import(\"../geom/Geometry.js\").default, Array, import(\"../geom/Geometry.js\").GeometryLayout)}\n */\nconst GeometryConstructor = {\n  'POINT': Point,\n  'LINESTRING': LineString,\n  'POLYGON': Polygon,\n  'MULTIPOINT': MultiPoint,\n  'MULTILINESTRING': MultiLineString,\n  'MULTIPOLYGON': MultiPolygon,\n};\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into\n * multiple features on reading.\n */\n\n/**\n * @typedef {Object} Token\n * @property {number} type Type.\n * @property {number|string} [value] Value.\n * @property {number} position Position.\n */\n\n/**\n * @const\n * @type {string}\n */\nconst EMPTY = 'EMPTY';\n\n/**\n * @const\n * @type {string}\n */\nconst Z = 'Z';\n\n/**\n * @const\n * @type {string}\n */\nconst M = 'M';\n\n/**\n * @const\n * @type {string}\n */\nconst ZM = 'ZM';\n\n/**\n * @const\n * @enum {number}\n */\nconst TokenType = {\n  START: 0,\n  TEXT: 1,\n  LEFT_PAREN: 2,\n  RIGHT_PAREN: 3,\n  NUMBER: 4,\n  COMMA: 5,\n  EOF: 6,\n};\n\n/**\n * @type {Object<import(\"../geom/Geometry.js\").Type, string>}\n */\nconst wktTypeLookup = {\n  Point: 'POINT',\n  LineString: 'LINESTRING',\n  Polygon: 'POLYGON',\n  MultiPoint: 'MULTIPOINT',\n  MultiLineString: 'MULTILINESTRING',\n  MultiPolygon: 'MULTIPOLYGON',\n  GeometryCollection: 'GEOMETRYCOLLECTION',\n  Circle: 'CIRCLE',\n};\n\n/**\n * Class to tokenize a WKT string.\n */\nclass Lexer {\n  /**\n   * @param {string} wkt WKT string.\n   */\n  constructor(wkt) {\n    /**\n     * @type {string}\n     */\n    this.wkt = wkt;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.index_ = -1;\n  }\n\n  /**\n   * @param {string} c Character.\n   * @return {boolean} Whether the character is alphabetic.\n   * @private\n   */\n  isAlpha_(c) {\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n  }\n\n  /**\n   * @param {string} c Character.\n   * @param {boolean} [decimal] Whether the string number\n   *     contains a dot, i.e. is a decimal number.\n   * @return {boolean} Whether the character is numeric.\n   * @private\n   */\n  isNumeric_(c, decimal) {\n    decimal = decimal !== undefined ? decimal : false;\n    return (c >= '0' && c <= '9') || (c == '.' && !decimal);\n  }\n\n  /**\n   * @param {string} c Character.\n   * @return {boolean} Whether the character is whitespace.\n   * @private\n   */\n  isWhiteSpace_(c) {\n    return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n  }\n\n  /**\n   * @return {string} Next string character.\n   * @private\n   */\n  nextChar_() {\n    return this.wkt.charAt(++this.index_);\n  }\n\n  /**\n   * Fetch and return the next token.\n   * @return {Token} Next string token.\n   */\n  nextToken() {\n    const c = this.nextChar_();\n    const position = this.index_;\n    /** @type {number|string} */\n    let value = c;\n    let type;\n\n    if (c == '(') {\n      type = TokenType.LEFT_PAREN;\n    } else if (c == ',') {\n      type = TokenType.COMMA;\n    } else if (c == ')') {\n      type = TokenType.RIGHT_PAREN;\n    } else if (this.isNumeric_(c) || c == '-') {\n      type = TokenType.NUMBER;\n      value = this.readNumber_();\n    } else if (this.isAlpha_(c)) {\n      type = TokenType.TEXT;\n      value = this.readText_();\n    } else if (this.isWhiteSpace_(c)) {\n      return this.nextToken();\n    } else if (c === '') {\n      type = TokenType.EOF;\n    } else {\n      throw new Error('Unexpected character: ' + c);\n    }\n\n    return {position: position, value: value, type: type};\n  }\n\n  /**\n   * @return {number} Numeric token value.\n   * @private\n   */\n  readNumber_() {\n    let c;\n    const index = this.index_;\n    let decimal = false;\n    let scientificNotation = false;\n    do {\n      if (c == '.') {\n        decimal = true;\n      } else if (c == 'e' || c == 'E') {\n        scientificNotation = true;\n      }\n      c = this.nextChar_();\n    } while (\n      this.isNumeric_(c, decimal) ||\n      // if we haven't detected a scientific number before, 'e' or 'E'\n      // hint that we should continue to read\n      (!scientificNotation && (c == 'e' || c == 'E')) ||\n      // once we know that we have a scientific number, both '-' and '+'\n      // are allowed\n      (scientificNotation && (c == '-' || c == '+'))\n    );\n    return parseFloat(this.wkt.substring(index, this.index_--));\n  }\n\n  /**\n   * @return {string} String token value.\n   * @private\n   */\n  readText_() {\n    let c;\n    const index = this.index_;\n    do {\n      c = this.nextChar_();\n    } while (this.isAlpha_(c));\n    return this.wkt.substring(index, this.index_--).toUpperCase();\n  }\n}\n\n/**\n * Class to parse the tokens from the WKT string.\n */\nclass Parser {\n  /**\n   * @param {Lexer} lexer The lexer.\n   */\n  constructor(lexer) {\n    /**\n     * @type {Lexer}\n     * @private\n     */\n    this.lexer_ = lexer;\n\n    /**\n     * @type {Token}\n     * @private\n     */\n    this.token_ = {\n      position: 0,\n      type: TokenType.START,\n    };\n\n    /**\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     * @private\n     */\n    this.layout_ = 'XY';\n  }\n\n  /**\n   * Fetch the next token form the lexer and replace the active token.\n   * @private\n   */\n  consume_() {\n    this.token_ = this.lexer_.nextToken();\n  }\n\n  /**\n   * Tests if the given type matches the type of the current token.\n   * @param {TokenType} type Token type.\n   * @return {boolean} Whether the token matches the given type.\n   */\n  isTokenType(type) {\n    return this.token_.type == type;\n  }\n\n  /**\n   * If the given type matches the current token, consume it.\n   * @param {TokenType} type Token type.\n   * @return {boolean} Whether the token matches the given type.\n   */\n  match(type) {\n    const isMatch = this.isTokenType(type);\n    if (isMatch) {\n      this.consume_();\n    }\n    return isMatch;\n  }\n\n  /**\n   * Try to parse the tokens provided by the lexer.\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\n   */\n  parse() {\n    this.consume_();\n    return this.parseGeometry_();\n  }\n\n  /**\n   * Try to parse the dimensional info.\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} The layout.\n   * @private\n   */\n  parseGeometryLayout_() {\n    /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n    let layout = 'XY';\n    const dimToken = this.token_;\n    if (this.isTokenType(TokenType.TEXT)) {\n      const dimInfo = dimToken.value;\n      if (dimInfo === Z) {\n        layout = 'XYZ';\n      } else if (dimInfo === M) {\n        layout = 'XYM';\n      } else if (dimInfo === ZM) {\n        layout = 'XYZM';\n      }\n      if (layout !== 'XY') {\n        this.consume_();\n      }\n    }\n    return layout;\n  }\n\n  /**\n   * @return {Array<import(\"../geom/Geometry.js\").default>} A collection of geometries.\n   * @private\n   */\n  parseGeometryCollectionText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const geometries = [];\n      do {\n        geometries.push(this.parseGeometry_());\n      } while (this.match(TokenType.COMMA));\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return geometries;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<number>} All values in a point.\n   * @private\n   */\n  parsePointText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePoint_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<number>>} All points in a linestring.\n   * @private\n   */\n  parseLineStringText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePointList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<Array<number>>>} All points in a polygon.\n   * @private\n   */\n  parsePolygonText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parseLineStringTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<number>>} All points in a multipoint.\n   * @private\n   */\n  parseMultiPointText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      let coordinates;\n      if (this.token_.type == TokenType.LEFT_PAREN) {\n        coordinates = this.parsePointTextList_();\n      } else {\n        coordinates = this.parsePointList_();\n      }\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<Array<number>>>} All linestring points\n   *                                          in a multilinestring.\n   * @private\n   */\n  parseMultiLineStringText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parseLineStringTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<Array<Array<number>>>>} All polygon points in a multipolygon.\n   * @private\n   */\n  parseMultiPolygonText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePolygonTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<number>} A point.\n   * @private\n   */\n  parsePoint_() {\n    const coordinates = [];\n    const dimensions = this.layout_.length;\n    for (let i = 0; i < dimensions; ++i) {\n      const token = this.token_;\n      if (this.match(TokenType.NUMBER)) {\n        coordinates.push(/** @type {number} */ (token.value));\n      } else {\n        break;\n      }\n    }\n    if (coordinates.length == dimensions) {\n      return coordinates;\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<Array<number>>} An array of points.\n   * @private\n   */\n  parsePointList_() {\n    const coordinates = [this.parsePoint_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePoint_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {Array<Array<number>>} An array of points.\n   * @private\n   */\n  parsePointTextList_() {\n    const coordinates = [this.parsePointText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePointText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {Array<Array<Array<number>>>} An array of points.\n   * @private\n   */\n  parseLineStringTextList_() {\n    const coordinates = [this.parseLineStringText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parseLineStringText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {Array<Array<Array<Array<number>>>>} An array of points.\n   * @private\n   */\n  parsePolygonTextList_() {\n    const coordinates = [this.parsePolygonText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePolygonText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {boolean} Whether the token implies an empty geometry.\n   * @private\n   */\n  isEmptyGeometry_() {\n    const isEmpty =\n      this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;\n    if (isEmpty) {\n      this.consume_();\n    }\n    return isEmpty;\n  }\n\n  /**\n   * Create an error message for an unexpected token error.\n   * @return {string} Error message.\n   * @private\n   */\n  formatErrorMessage_() {\n    return (\n      'Unexpected `' +\n      this.token_.value +\n      '` at position ' +\n      this.token_.position +\n      ' in `' +\n      this.lexer_.wkt +\n      '`'\n    );\n  }\n\n  /**\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\n   * @private\n   */\n  parseGeometry_() {\n    const token = this.token_;\n    if (this.match(TokenType.TEXT)) {\n      const geomType = /** @type {string} */ (token.value);\n      this.layout_ = this.parseGeometryLayout_();\n      const isEmpty = this.isEmptyGeometry_();\n      if (geomType == 'GEOMETRYCOLLECTION') {\n        if (isEmpty) {\n          return new GeometryCollection([]);\n        }\n        const geometries = this.parseGeometryCollectionText_();\n        return new GeometryCollection(geometries);\n      }\n      const ctor = GeometryConstructor[geomType];\n      if (!ctor) {\n        throw new Error('Invalid geometry type: ' + geomType);\n      }\n\n      let coordinates;\n\n      if (isEmpty) {\n        if (geomType == 'POINT') {\n          coordinates = [NaN, NaN];\n        } else {\n          coordinates = [];\n        }\n      } else {\n        switch (geomType) {\n          case 'POINT': {\n            coordinates = this.parsePointText_();\n            break;\n          }\n          case 'LINESTRING': {\n            coordinates = this.parseLineStringText_();\n            break;\n          }\n          case 'POLYGON': {\n            coordinates = this.parsePolygonText_();\n            break;\n          }\n          case 'MULTIPOINT': {\n            coordinates = this.parseMultiPointText_();\n            break;\n          }\n          case 'MULTILINESTRING': {\n            coordinates = this.parseMultiLineStringText_();\n            break;\n          }\n          case 'MULTIPOLYGON': {\n            coordinates = this.parseMultiPolygonText_();\n            break;\n          }\n          default:\n            break;\n        }\n      }\n\n      return new ctor(coordinates, this.layout_);\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n}\n\n/**\n * @classdesc\n * Geometry format for reading and writing data in the `WellKnownText` (WKT)\n * format.\n *\n * @api\n */\nclass WKT extends TextFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * Split GeometryCollection into multiple features.\n     * @type {boolean}\n     * @private\n     */\n    this.splitCollection_ =\n      options.splitCollection !== undefined ? options.splitCollection : false;\n  }\n\n  /**\n   * Parse a WKT string.\n   * @param {string} wkt WKT string.\n   * @return {import(\"../geom/Geometry.js\").default}\n   *     The geometry created.\n   * @private\n   */\n  parse_(wkt) {\n    const lexer = new Lexer(wkt);\n    const parser = new Parser(lexer);\n    return parser.parse();\n  }\n\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    const geom = this.readGeometryFromText(text, options);\n    const feature = new Feature();\n    feature.setGeometry(geom);\n    return feature;\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    let geometries = [];\n    const geometry = this.readGeometryFromText(text, options);\n    if (this.splitCollection_ && geometry.getType() == 'GeometryCollection') {\n      geometries = /** @type {GeometryCollection} */ (\n        geometry\n      ).getGeometriesArray();\n    } else {\n      geometries = [geometry];\n    }\n    const features = [];\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const feature = new Feature();\n      feature.setGeometry(geometries[i]);\n      features.push(feature);\n    }\n    return features;\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromText(text, options) {\n    const geometry = this.parse_(text);\n    return transformGeometryWithOptions(geometry, false, options);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeatureText(feature, options) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      return this.writeGeometryText(geometry, options);\n    }\n    return '';\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeaturesText(features, options) {\n    if (features.length == 1) {\n      return this.writeFeatureText(features[0], options);\n    }\n    const geometries = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      geometries.push(features[i].getGeometry());\n    }\n    const collection = new GeometryCollection(geometries);\n    return this.writeGeometryText(collection, options);\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeGeometryText(geometry, options) {\n    return encode(transformGeometryWithOptions(geometry, true, options));\n  }\n}\n\n/**\n * @param {Point} geom Point geometry.\n * @return {string} Coordinates part of Point as WKT.\n */\nfunction encodePointGeometry(geom) {\n  const coordinates = geom.getCoordinates();\n  if (coordinates.length === 0) {\n    return '';\n  }\n  return coordinates.join(' ');\n}\n\n/**\n * @param {MultiPoint} geom MultiPoint geometry.\n * @return {string} Coordinates part of MultiPoint as WKT.\n */\nfunction encodeMultiPointGeometry(geom) {\n  const array = [];\n  const components = geom.getPoints();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodePointGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n/**\n * @param {GeometryCollection} geom GeometryCollection geometry.\n * @return {string} Coordinates part of GeometryCollection as WKT.\n */\nfunction encodeGeometryCollectionGeometry(geom) {\n  const array = [];\n  const geoms = geom.getGeometries();\n  for (let i = 0, ii = geoms.length; i < ii; ++i) {\n    array.push(encode(geoms[i]));\n  }\n  return array.join(',');\n}\n\n/**\n * @param {LineString|import(\"../geom/LinearRing.js\").default} geom LineString geometry.\n * @return {string} Coordinates part of LineString as WKT.\n */\nfunction encodeLineStringGeometry(geom) {\n  const coordinates = geom.getCoordinates();\n  const array = [];\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    array.push(coordinates[i].join(' '));\n  }\n  return array.join(',');\n}\n\n/**\n * @param {MultiLineString} geom MultiLineString geometry.\n * @return {string} Coordinates part of MultiLineString as WKT.\n */\nfunction encodeMultiLineStringGeometry(geom) {\n  const array = [];\n  const components = geom.getLineStrings();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodeLineStringGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n/**\n * @param {Polygon} geom Polygon geometry.\n * @return {string} Coordinates part of Polygon as WKT.\n */\nfunction encodePolygonGeometry(geom) {\n  const array = [];\n  const rings = geom.getLinearRings();\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');\n  }\n  return array.join(',');\n}\n\n/**\n * @param {MultiPolygon} geom MultiPolygon geometry.\n * @return {string} Coordinates part of MultiPolygon as WKT.\n */\nfunction encodeMultiPolygonGeometry(geom) {\n  const array = [];\n  const components = geom.getPolygons();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodePolygonGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geom SimpleGeometry geometry.\n * @return {string} Potential dimensional information for WKT type.\n */\nfunction encodeGeometryLayout(geom) {\n  const layout = geom.getLayout();\n  let dimInfo = '';\n  if (layout === 'XYZ' || layout === 'XYZM') {\n    dimInfo += Z;\n  }\n  if (layout === 'XYM' || layout === 'XYZM') {\n    dimInfo += M;\n  }\n  return dimInfo;\n}\n\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default): string>}\n */\nconst GeometryEncoder = {\n  'Point': encodePointGeometry,\n  'LineString': encodeLineStringGeometry,\n  'Polygon': encodePolygonGeometry,\n  'MultiPoint': encodeMultiPointGeometry,\n  'MultiLineString': encodeMultiLineStringGeometry,\n  'MultiPolygon': encodeMultiPolygonGeometry,\n  'GeometryCollection': encodeGeometryCollectionGeometry,\n};\n\n/**\n * Encode a geometry as WKT.\n * @param {import(\"../geom/Geometry.js\").default} geom The geometry to encode.\n * @return {string} WKT string for the geometry.\n */\nfunction encode(geom) {\n  const type = geom.getType();\n  const geometryEncoder = GeometryEncoder[type];\n  const enc = geometryEncoder(geom);\n  let wktType = wktTypeLookup[type];\n  if (typeof (/** @type {?} */ (geom).getFlatCoordinates) === 'function') {\n    const dimInfo = encodeGeometryLayout(\n      /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geom)\n    );\n    if (dimInfo.length > 0) {\n      wktType += ' ' + dimInfo;\n    }\n  }\n  if (enc.length === 0) {\n    return wktType + ' ' + EMPTY;\n  }\n  return wktType + '(' + enc + ')';\n}\n\nexport default WKT;\n", "/**\n * @module ol/format/WMSCapabilities\n */\nimport XML from './XML.js';\nimport {\n  makeArrayPusher,\n  makeObjectPropertyPusher,\n  makeObjectPropertySetter,\n  makeStructureNS,\n  pushParseAndPop,\n} from '../xml.js';\nimport {\n  readBooleanString,\n  readDecimal,\n  readDecimalString,\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  readString,\n} from './xsd.js';\nimport {readHref} from './xlink.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wms'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Service': makeObjectPropertySetter(readService),\n  'Capability': makeObjectPropertySetter(readCapability),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CAPABILITY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Request': makeObjectPropertySetter(readRequest),\n  'Exception': makeObjectPropertySetter(readException),\n  'Layer': makeObjectPropertySetter(readCapabilityLayer),\n});\n\n/**\n * @classdesc\n * Format for reading WMS capabilities data\n *\n * @api\n */\nclass WMSCapabilities extends XML {\n  constructor() {\n    super();\n\n    /**\n     * @type {string|undefined}\n     */\n    this.version = undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n  readFromNode(node) {\n    this.version = node.getAttribute('version').trim();\n    const wmsCapabilityObject = pushParseAndPop(\n      {\n        'version': this.version,\n      },\n      PARSERS,\n      node,\n      []\n    );\n    return wmsCapabilityObject ? wmsCapabilityObject : null;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Name': makeObjectPropertySetter(readString),\n  'Title': makeObjectPropertySetter(readString),\n  'Abstract': makeObjectPropertySetter(readString),\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\n  'OnlineResource': makeObjectPropertySetter(readHref),\n  'ContactInformation': makeObjectPropertySetter(readContactInformation),\n  'Fees': makeObjectPropertySetter(readString),\n  'AccessConstraints': makeObjectPropertySetter(readString),\n  'LayerLimit': makeObjectPropertySetter(readPositiveInteger),\n  'MaxWidth': makeObjectPropertySetter(readPositiveInteger),\n  'MaxHeight': makeObjectPropertySetter(readPositiveInteger),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTACT_INFORMATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),\n  'ContactPosition': makeObjectPropertySetter(readString),\n  'ContactAddress': makeObjectPropertySetter(readContactAddress),\n  'ContactVoiceTelephone': makeObjectPropertySetter(readString),\n  'ContactFacsimileTelephone': makeObjectPropertySetter(readString),\n  'ContactElectronicMailAddress': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTACT_PERSON_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ContactPerson': makeObjectPropertySetter(readString),\n  'ContactOrganization': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTACT_ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'AddressType': makeObjectPropertySetter(readString),\n  'Address': makeObjectPropertySetter(readString),\n  'City': makeObjectPropertySetter(readString),\n  'StateOrProvince': makeObjectPropertySetter(readString),\n  'PostCode': makeObjectPropertySetter(readString),\n  'Country': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXCEPTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Format': makeArrayPusher(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAYER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Name': makeObjectPropertySetter(readString),\n  'Title': makeObjectPropertySetter(readString),\n  'Abstract': makeObjectPropertySetter(readString),\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\n  'CRS': makeObjectPropertyPusher(readString),\n  'EX_GeographicBoundingBox': makeObjectPropertySetter(\n    readEXGeographicBoundingBox\n  ),\n  'BoundingBox': makeObjectPropertyPusher(readBoundingBox),\n  'Dimension': makeObjectPropertyPusher(readDimension),\n  'Attribution': makeObjectPropertySetter(readAttribution),\n  'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),\n  'Identifier': makeObjectPropertyPusher(readString),\n  'MetadataURL': makeObjectPropertyPusher(readMetadataURL),\n  'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),\n  'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),\n  'Style': makeObjectPropertyPusher(readStyle),\n  'MinScaleDenominator': makeObjectPropertySetter(readDecimal),\n  'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),\n  'Layer': makeObjectPropertyPusher(readLayer),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ATTRIBUTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Title': makeObjectPropertySetter(readString),\n  'OnlineResource': makeObjectPropertySetter(readHref),\n  'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'westBoundLongitude': makeObjectPropertySetter(readDecimal),\n  'eastBoundLongitude': makeObjectPropertySetter(readDecimal),\n  'southBoundLatitude': makeObjectPropertySetter(readDecimal),\n  'northBoundLatitude': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REQUEST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'GetCapabilities': makeObjectPropertySetter(readOperationType),\n  'GetMap': makeObjectPropertySetter(readOperationType),\n  'GetFeatureInfo': makeObjectPropertySetter(readOperationType),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OPERATIONTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Format': makeObjectPropertyPusher(readString),\n  'DCPType': makeObjectPropertyPusher(readDCPType),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DCPTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'HTTP': makeObjectPropertySetter(readHTTP),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Get': makeObjectPropertySetter(readFormatOnlineresource),\n  'Post': makeObjectPropertySetter(readFormatOnlineresource),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Name': makeObjectPropertySetter(readString),\n  'Title': makeObjectPropertySetter(readString),\n  'Abstract': makeObjectPropertySetter(readString),\n  'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),\n  'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),\n  'StyleURL': makeObjectPropertySetter(readFormatOnlineresource),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FORMAT_ONLINERESOURCE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Format': makeObjectPropertySetter(readString),\n  'OnlineResource': makeObjectPropertySetter(readHref),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst KEYWORDLIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Keyword': makeArrayPusher(readString),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nfunction readAttribution(node, objectStack) {\n  return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object} Bounding box object.\n */\nfunction readBoundingBox(node, objectStack) {\n  const extent = [\n    readDecimalString(node.getAttribute('minx')),\n    readDecimalString(node.getAttribute('miny')),\n    readDecimalString(node.getAttribute('maxx')),\n    readDecimalString(node.getAttribute('maxy')),\n  ];\n\n  const resolutions = [\n    readDecimalString(node.getAttribute('resx')),\n    readDecimalString(node.getAttribute('resy')),\n  ];\n\n  return {\n    'crs': node.getAttribute('CRS'),\n    'extent': extent,\n    'res': resolutions,\n  };\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {import(\"../extent.js\").Extent|undefined} Bounding box object.\n */\nfunction readEXGeographicBoundingBox(node, objectStack) {\n  const geographicBoundingBox = pushParseAndPop(\n    {},\n    EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,\n    node,\n    objectStack\n  );\n  if (!geographicBoundingBox) {\n    return undefined;\n  }\n  const westBoundLongitude =\n    /** @type {number|undefined} */\n    (geographicBoundingBox['westBoundLongitude']);\n  const southBoundLatitude =\n    /** @type {number|undefined} */\n    (geographicBoundingBox['southBoundLatitude']);\n  const eastBoundLongitude =\n    /** @type {number|undefined} */\n    (geographicBoundingBox['eastBoundLongitude']);\n  const northBoundLatitude =\n    /** @type {number|undefined} */\n    (geographicBoundingBox['northBoundLatitude']);\n  if (\n    westBoundLongitude === undefined ||\n    southBoundLatitude === undefined ||\n    eastBoundLongitude === undefined ||\n    northBoundLatitude === undefined\n  ) {\n    return undefined;\n  }\n  return [\n    westBoundLongitude,\n    southBoundLatitude,\n    eastBoundLongitude,\n    northBoundLatitude,\n  ];\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Capability object.\n */\nfunction readCapability(node, objectStack) {\n  return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Service object.\n */\nfunction readService(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Contact information object.\n */\nfunction readContactInformation(node, objectStack) {\n  return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Contact person object.\n */\nfunction readContactPersonPrimary(node, objectStack) {\n  return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Contact address object.\n */\nfunction readContactAddress(node, objectStack) {\n  return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Format array.\n */\nfunction readException(node, objectStack) {\n  return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Layer object.\n */\nfunction readCapabilityLayer(node, objectStack) {\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\n\n  if (layerObject['Layer'] === undefined) {\n    return Object.assign(layerObject, readLayer(node, objectStack));\n  }\n\n  return layerObject;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Layer object.\n */\nfunction readLayer(node, objectStack) {\n  const parentLayerObject = /**  @type {!Object<string,*>} */ (\n    objectStack[objectStack.length - 1]\n  );\n\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\n\n  if (!layerObject) {\n    return undefined;\n  }\n  let queryable = readBooleanString(node.getAttribute('queryable'));\n  if (queryable === undefined) {\n    queryable = parentLayerObject['queryable'];\n  }\n  layerObject['queryable'] = queryable !== undefined ? queryable : false;\n\n  let cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));\n  if (cascaded === undefined) {\n    cascaded = parentLayerObject['cascaded'];\n  }\n  layerObject['cascaded'] = cascaded;\n\n  let opaque = readBooleanString(node.getAttribute('opaque'));\n  if (opaque === undefined) {\n    opaque = parentLayerObject['opaque'];\n  }\n  layerObject['opaque'] = opaque !== undefined ? opaque : false;\n\n  let noSubsets = readBooleanString(node.getAttribute('noSubsets'));\n  if (noSubsets === undefined) {\n    noSubsets = parentLayerObject['noSubsets'];\n  }\n  layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;\n\n  let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));\n  if (!fixedWidth) {\n    fixedWidth = parentLayerObject['fixedWidth'];\n  }\n  layerObject['fixedWidth'] = fixedWidth;\n\n  let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));\n  if (!fixedHeight) {\n    fixedHeight = parentLayerObject['fixedHeight'];\n  }\n  layerObject['fixedHeight'] = fixedHeight;\n\n  // See 7.2.4.8\n  const addKeys = ['Style', 'CRS', 'AuthorityURL'];\n  addKeys.forEach(function (key) {\n    if (key in parentLayerObject) {\n      const childValue = layerObject[key] || [];\n      layerObject[key] = childValue.concat(parentLayerObject[key]);\n    }\n  });\n\n  const replaceKeys = [\n    'EX_GeographicBoundingBox',\n    'BoundingBox',\n    'Dimension',\n    'Attribution',\n    'MinScaleDenominator',\n    'MaxScaleDenominator',\n  ];\n  replaceKeys.forEach(function (key) {\n    if (!(key in layerObject)) {\n      const parentValue = parentLayerObject[key];\n      layerObject[key] = parentValue;\n    }\n  });\n\n  return layerObject;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object} Dimension object.\n */\nfunction readDimension(node, objectStack) {\n  const dimensionObject = {\n    'name': node.getAttribute('name'),\n    'units': node.getAttribute('units'),\n    'unitSymbol': node.getAttribute('unitSymbol'),\n    'default': node.getAttribute('default'),\n    'multipleValues': readBooleanString(node.getAttribute('multipleValues')),\n    'nearestValue': readBooleanString(node.getAttribute('nearestValue')),\n    'current': readBooleanString(node.getAttribute('current')),\n    'values': readString(node),\n  };\n  return dimensionObject;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Online resource object.\n */\nfunction readFormatOnlineresource(node, objectStack) {\n  return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Request object.\n */\nfunction readRequest(node, objectStack) {\n  return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} DCP type object.\n */\nfunction readDCPType(node, objectStack) {\n  return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} HTTP object.\n */\nfunction readHTTP(node, objectStack) {\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Operation type object.\n */\nfunction readOperationType(node, objectStack) {\n  return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Online resource object.\n */\nfunction readSizedFormatOnlineresource(node, objectStack) {\n  const formatOnlineresource = readFormatOnlineresource(node, objectStack);\n  if (formatOnlineresource) {\n    const size = [\n      readNonNegativeIntegerString(node.getAttribute('width')),\n      readNonNegativeIntegerString(node.getAttribute('height')),\n    ];\n    formatOnlineresource['size'] = size;\n    return formatOnlineresource;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Authority URL object.\n */\nfunction readAuthorityURL(node, objectStack) {\n  const authorityObject = readFormatOnlineresource(node, objectStack);\n  if (authorityObject) {\n    authorityObject['name'] = node.getAttribute('name');\n    return authorityObject;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Metadata URL object.\n */\nfunction readMetadataURL(node, objectStack) {\n  const metadataObject = readFormatOnlineresource(node, objectStack);\n  if (metadataObject) {\n    metadataObject['type'] = node.getAttribute('type');\n    return metadataObject;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nfunction readStyle(node, objectStack) {\n  return pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Keyword list.\n */\nfunction readKeywordList(node, objectStack) {\n  return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);\n}\n\nexport default WMSCapabilities;\n", "/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\nimport {extend} from '../array.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\nclass WMSGetFeatureInfo extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n    /**\n     * @private\n     * @type {GML2}\n     */\n    this.gmlFormat_ = new GML2();\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n  }\n\n  /**\n   * @return {Array<string>|null} layers\n   */\n  getLayers() {\n    return this.layers_;\n  }\n\n  /**\n   * @param {Array<string>|null} layers Layers to parse.\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n  readFeatures_(node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    const localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = [];\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n    if (localName == 'msGMLOutput') {\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n        const layer = node.childNodes[i];\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        const layerElement = /** @type {Element} */ (layer);\n        const context = objectStack[0];\n\n        const toRemove = layerIdentifier;\n        const layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !this.layers_.includes(layerName)) {\n          continue;\n        }\n\n        const featureType = layerName + featureIdentifier;\n\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        parsers[featureType] = makeArrayPusher(\n          this.gmlFormat_.readFeatureElement,\n          this.gmlFormat_\n        );\n        const parsersNS = makeStructureNS(\n          [context['featureNS'], null],\n          parsers\n        );\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        const layerFeatures = pushParseAndPop(\n          [],\n          // @ts-ignore\n          parsersNS,\n          layerElement,\n          objectStack,\n          this.gmlFormat_\n        );\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n    if (localName == 'FeatureCollection') {\n      const gmlFeatures = pushParseAndPop(\n        [],\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\n        node,\n        [{}],\n        this.gmlFormat_\n      );\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    const internalOptions = {};\n    if (options) {\n      Object.assign(internalOptions, this.getReadOptions(node, options));\n    }\n    return this.readFeatures_(node, [internalOptions]);\n  }\n}\n\nexport default WMSGetFeatureInfo;\n", "/**\n * @module ol/format/WMTSCapabilities\n */\nimport OWS from './OWS.js';\nimport XML from './XML.js';\nimport {boundingExtent} from '../extent.js';\nimport {\n  makeArrayPusher,\n  makeObjectPropertyPusher,\n  makeObjectPropertySetter,\n  makeStructureNS,\n  pushParseAndPop,\n} from '../xml.js';\nimport {readDecimal, readPositiveInteger, readString} from './xsd.js';\nimport {readHref} from './xlink.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Contents': makeObjectPropertySetter(readContents),\n});\n\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @api\n */\nclass WMTSCapabilities extends XML {\n  constructor() {\n    super();\n\n    /**\n     * @type {OWS}\n     * @private\n     */\n    this.owsParser_ = new OWS();\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n  readFromNode(node) {\n    let version = node.getAttribute('version');\n    if (version) {\n      version = version.trim();\n    }\n    let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n    if (!WMTSCapabilityObject) {\n      return null;\n    }\n    WMTSCapabilityObject['version'] = version;\n    WMTSCapabilityObject = pushParseAndPop(\n      WMTSCapabilityObject,\n      PARSERS,\n      node,\n      []\n    );\n    return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Layer': makeObjectPropertyPusher(readLayer),\n  'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAYER_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'Style': makeObjectPropertyPusher(readStyle),\n    'Format': makeObjectPropertyPusher(readString),\n    'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),\n    'Dimension': makeObjectPropertyPusher(readDimensions),\n    'ResourceURL': makeObjectPropertyPusher(readResourceUrl),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'LegendURL': makeObjectPropertyPusher(readLegendUrl),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrixSet': makeObjectPropertySetter(readString),\n  'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrix': makeObjectPropertySetter(readString),\n  'MinTileRow': makeObjectPropertySetter(readPositiveInteger),\n  'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),\n  'MinTileCol': makeObjectPropertySetter(readPositiveInteger),\n  'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DIMENSION_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'Default': makeObjectPropertySetter(readString),\n    'Value': makeObjectPropertyPusher(readString),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {\n  'LowerCorner': makeArrayPusher(readCoordinates),\n  'UpperCorner': makeArrayPusher(readCoordinates),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'WellKnownScaleSet': makeObjectPropertySetter(readString),\n    'TileMatrix': makeObjectPropertyPusher(readTileMatrix),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'SupportedCRS': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n    'BoundingBox': makeObjectPropertySetter(readBoundingBox),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TM_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'TopLeftCorner': makeObjectPropertySetter(readCoordinates),\n    'ScaleDenominator': makeObjectPropertySetter(readDecimal),\n    'TileWidth': makeObjectPropertySetter(readPositiveInteger),\n    'TileHeight': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nfunction readContents(node, objectStack) {\n  return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nfunction readLayer(node, objectStack) {\n  return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nfunction readTileMatrixSet(node, objectStack) {\n  return pushParseAndPop({}, TMS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nfunction readStyle(node, objectStack) {\n  const style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\n  if (!style) {\n    return undefined;\n  }\n  const isDefault = node.getAttribute('isDefault') === 'true';\n  style['isDefault'] = isDefault;\n  return style;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nfunction readTileMatrixSetLink(node, objectStack) {\n  return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nfunction readDimensions(node, objectStack) {\n  return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nfunction readResourceUrl(node, objectStack) {\n  const format = node.getAttribute('format');\n  const template = node.getAttribute('template');\n  const resourceType = node.getAttribute('resourceType');\n  const resource = {};\n  if (format) {\n    resource['format'] = format;\n  }\n  if (template) {\n    resource['template'] = template;\n  }\n  if (resourceType) {\n    resource['resourceType'] = resourceType;\n  }\n  return resource;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} BBox object.\n */\nfunction readBoundingBox(node, objectStack) {\n  const coordinates = pushParseAndPop(\n    [],\n    WGS84_BBOX_READERS,\n    node,\n    objectStack\n  );\n  if (coordinates.length != 2) {\n    return undefined;\n  }\n  return boundingExtent(coordinates);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nfunction readLegendUrl(node, objectStack) {\n  const legend = {};\n  legend['format'] = node.getAttribute('format');\n  legend['href'] = readHref(node);\n  return legend;\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nfunction readCoordinates(node, objectStack) {\n  const coordinates = readString(node).split(/\\s+/);\n  if (!coordinates || coordinates.length != 2) {\n    return undefined;\n  }\n  const x = +coordinates[0];\n  const y = +coordinates[1];\n  if (isNaN(x) || isNaN(y)) {\n    return undefined;\n  }\n  return [x, y];\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nfunction readTileMatrix(node, objectStack) {\n  return pushParseAndPop({}, TM_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nfunction readTileMatrixLimitsList(node, objectStack) {\n  return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nfunction readTileMatrixLimits(node, objectStack) {\n  return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);\n}\n\nexport default WMTSCapabilities;\n"],
  "mappings": "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",
  "names": ["Feature_default", "schemaLocation", "MULTIGEOMETRY_TO_MEMBER_NODENAME", "nodeName", "Feature_default", "NAMESPACE_URIS", "SCHEMA_LOCATION", "LINK_PARSERS", "NAMESPACE_URIS", "SCHEMA_LOCATION", "geometry", "imageState", "imageSize", "type", "LINK_PARSERS", "GEOMETRY_TYPE_TO_NODENAME", "NAMESPACE_URIS", "GEOMETRY_READERS", "readPointGeometry", "readLineStringGeometry", "readPolygonGeometry", "readMultiPointGeometry", "readMultiLineStringGeometry", "readMultiPolygonGeometry", "Feature_default", "geometry", "isEmpty", "NAMESPACE_URIS", "PARSERS", "readStyle", "HTTP_PARSERS", "STYLE_PARSERS", "NAMESPACE_URIS", "PARSERS", "readLayer", "LAYER_PARSERS", "readStyle", "readBoundingBox", "STYLE_PARSERS"]
}
