// node_modules/sortable-tablesort/sortable.min.js
document.addEventListener("click", function(c) {
  try {
    let f2 = function(a, b) {
      return a.nodeName === b ? a : f2(a.parentNode, b);
    }, n2 = function(a, b) {
      a.classList.remove("dir-d");
      a.classList.remove("dir-u");
      b && a.classList.add(b);
    }, p2 = function(a) {
      return x && a.dataset.sortAlt || a.dataset.sort || a.textContent;
    };
    var f = f2, n = n2, p = p2;
    var x = c.shiftKey || c.altKey, d = f2(c.target, "TH"), m = f2(d, "TR"), g = f2(m, "TABLE");
    if (g.classList.contains("sortable")) {
      var q, e = m.cells, r = parseInt(d.dataset.sortTbr);
      for (c = 0; c < e.length; c++)
        e[c] === d ? q = parseInt(d.dataset.sortCol) || c : n2(
          e[c],
          ""
        );
      e = "dir-d";
      if (d.classList.contains("dir-d") || g.classList.contains("asc") && !d.classList.contains("dir-u"))
        e = "dir-u";
      n2(d, e);
      var t = "dir-u" === e, v = function(a, b, h) {
        var u = p2((t ? a : b).cells[h]);
        a = p2((t ? b : a).cells[h]);
        b = parseFloat(u) - parseFloat(a);
        return isNaN(b) ? u.localeCompare(a) : b;
      };
      for (c = 0; c < g.tBodies.length; c++) {
        var k = g.tBodies[c], w = [].slice.call(k.rows, 0);
        w.sort(function(a, b) {
          var h = v(a, b, q);
          return 0 !== h || isNaN(r) ? h : v(a, b, r);
        });
        var l = k.cloneNode();
        l.append.apply(l, w);
        g.replaceChild(l, k);
      }
    }
  } catch (f2) {
  }
});
//# sourceMappingURL=sortable-tablesort_sortable__min__js.js.map
